Bottom: ace9271b373bf417b1e2769c7a3b74d23a8c5713
Top:    1765b7205e4ef693174589cf06b8cfe8c4e417a4
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2014-08-19 16:47:30 -0400

Refresh of tyler

---

diff --git a/sound/soc/sunxi/sunxi-codec.c b/sound/soc/sunxi/sunxi-codec.c
index c2fe47a..67f978e 100644
--- a/sound/soc/sunxi/sunxi-codec.c
+++ b/sound/soc/sunxi/sunxi-codec.c
@@ -31,7 +31,6 @@
 #include <sound/pcm.h>
 #include <sound/pcm_params.h>
 #include <sound/soc.h>
-<<<<<<< current
 #include <sound/tlv.h>
 #include <sound/initval.h>
 #include <sound/dmaengine_pcm.h>
@@ -95,64 +94,6 @@
 #define SUNXI_ADC_RXCNT			(0x34)
 #define SUNXI_AC_SYS_VERI		(0x38)
 #define SUNXI_AC_MIC_PHONE_CAL		(0x3c)
-=======
-#include <sound/initval.h>
-#include <sound/dmaengine_pcm.h>
-
-/* Codec register offsets and bit fields */
-#define SUNXI_DAC_DPC		(0x00)
-#define EN_DA				(31)
-#define DAC_VERSION			(23) /* For CODEC OLD VERSION */
-#define DVOL				(12)
-#define SUNXI_DAC_FIFOC		(0x04)
-#define DAC_FS				(29)
-#define FIR_VERSION			(28)
-#define SEND_LASAT			(26)
-#define TX_FIFO_MODE			(24)
-#define DAC_DRQ_CLR_CNT			(21)
-#define TX_TRIG_LEVEL			(8)
-#define DAC_MONO_EN			(6)
-#define TX_SAMPLE_BITS			(5)
-#define DAC_DRQ_EN			(4)
-#define DAC_FIFO_FLUSH			(0)
-#define SUNXI_DAC_FIFOS		(0x08)
-#define SUNXI_DAC_TXDATA	(0x0c)
-#define SUNXI_DAC_ACTL		(0x10)
-#define DACAENR				(31)
-#define DACAENL				(30)
-#define MIXEN				(29)
-#define DACPAS				(8)
-#define MIXPAS				(7)
-#define PA_MUTE				(6)
-#define PAVOL				(0)
-#define SUNXI_DAC_TUNE		(0x14)
-#define SUNXI_DAC_DEBUG		(0x18)
-#define SUNXI_ADC_FIFOC		(0x1c)
-#define EN_AD				(28)
-#define RX_FIFO_MODE			(24)
-#define RX_TRIG_LEVEL			(8)
-#define ADC_MONO_EN			(7)
-#define RX_SAMPLE_BITS			(6)
-#define ADC_DRQ_EN			(4)
-#define ADC_FIFO_FLUSH			(0)
-#define SUNXI_ADC_FIFOS		(0x20)
-#define SUNXI_ADC_RXDATA	(0x24)
-#define SUNXI_ADC_ACTL		(0x28)
-#define ADCREN				(31)
-#define ADCLEN				(30)
-#define PREG1EN				(29)
-#define PREG2EN				(28)
-#define VMICEN				(27)
-#define ADCG				(20)
-#define ADCIS				(17)
-#define PA_EN				(4)
-#define DDE				(3)
-#define SUNXI_ADC_DEBUG		(0x2c)
-#define SUNXI_DAC_TXCNT		(0x30)
-#define SUNXI_ADC_RXCNT		(0x34)
-#define SUNXI_AC_SYS_VERI	(0x38)
-#define SUNXI_AC_MIC_PHONE_CAL	(0x3c)
->>>>>>> patched
 
 /* Supported SoC families - used for quirks */
 enum sunxi_soc_family {
@@ -164,11 +105,7 @@ enum sunxi_soc_family {
 
 struct sunxi_priv {
 	struct regmap *regmap;
-<<<<<<< current
 	struct clk *clk_apb, *clk_module;
-=======
-	struct clk *clk_apb, *clk_pll2, *clk_module;
->>>>>>> patched
 
 	enum sunxi_soc_family revision;
 
@@ -176,7 +113,6 @@ struct sunxi_priv {
 	struct snd_dmaengine_dai_dma_data capture_dma_data;
 };
 
-<<<<<<< current
 static void sunxi_codec_play_start(struct sunxi_priv *priv)
 {
 	/* TODO: see if we need to drive PA GPIO high */
@@ -216,68 +152,10 @@ static void sunxi_codec_capture_stop(struct sunxi_priv *priv)
 	regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x1 << SUNXI_ADC_ACTL_VMICEN, 0x0 << SUNXI_ADC_ACTL_VMICEN);
 	if (priv->revision == SUN7I) {
 		/* TODO: undocumented */
-=======
-static int codec_play_start(struct sunxi_priv *priv)
-{
-	/* FIXME: drive PA gpio high */
-
-	/* flush TX FIFO */
-	regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << DAC_FIFO_FLUSH, 0x1 << DAC_FIFO_FLUSH);
-
-	/* enable DAC DRQ */
-	regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << DAC_DRQ_EN, 0x1 << DAC_DRQ_EN);
-	regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << PA_MUTE, 0x1 << PA_MUTE);
-
-	return 0;
-}
-
-static int codec_play_stop(struct sunxi_priv *priv)
-{
-	/* FIXME: drive PA gpio low */
-
-	/* mute PA */
-	regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << PA_MUTE, 0x0 << PA_MUTE);
-	mdelay(5);
-
-	/* disable DAC DRQ */
-	regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << DAC_DRQ_EN, 0x0 << DAC_DRQ_EN);
-
-	/* mute PA */
-	regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << PA_MUTE, 0x0 << PA_MUTE);
-	regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << DACAENL, 0x0 << DACAENL);
-	regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << DACAENR, 0x0 << DACAENR);
-
-	return 0;
-}
-
-static int codec_capture_start(struct sunxi_priv *priv)
-{
-	/* FIXME: drive PA gpio high */
-
-	/* enable ADC DRQ */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << ADC_DRQ_EN, 0x1 << ADC_DRQ_EN);
-
-	return 0;
-}
-
-static int codec_capture_stop(struct sunxi_priv *priv)
-{
-	/* disable ADC DRQ */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << ADC_DRQ_EN, 0x0 << ADC_DRQ_EN);
-
-	/* enable mic1 PA */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x1 << PREG1EN, 0x0 << PREG1EN);
-
-	/* enable VMIC */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x1 << VMICEN, 0x0 << VMICEN);
-	if (priv->revision == SUN7I) {
-		/* FIXME - undocumented */
->>>>>>> patched
 		regmap_update_bits(priv->regmap, SUNXI_DAC_TUNE, 0x3 << 8, 0x0 << 8);
 	}
 
 	/* enable ADC digital */
-<<<<<<< current
 	regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << SUNXI_ADC_FIFOC_EN_AD, 0x0 << SUNXI_ADC_FIFOC_EN_AD);
 
 	/* set RX FIFO mode */
@@ -288,63 +166,30 @@ static int codec_capture_stop(struct sunxi_priv *priv)
 
 	/* enable adc1 analog */
 	regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x3 << SUNXI_ADC_ACTL_ADCLEN, 0x0 << SUNXI_ADC_ACTL_ADCLEN);
-=======
-	regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << EN_AD, 0x0 << EN_AD);
-
-	/* set RX FIFO mode */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << RX_FIFO_MODE, 0x0 << RX_FIFO_MODE);
-
-	/* flush RX FIFO */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << ADC_FIFO_FLUSH, 0x0 << ADC_FIFO_FLUSH);
-
-	/* enable adc1 analog */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x3 << ADCLEN, 0x0 << ADCLEN);
-
-	return 0;
->>>>>>> patched
 }
 
 static int sunxi_codec_trigger(struct snd_pcm_substream *substream, int cmd,
 			       struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-<<<<<<< current
 	struct sunxi_priv *priv = snd_soc_card_get_drvdata(rtd->card);
-=======
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_codec *codec = codec_dai->codec;
-	struct snd_soc_card *card = codec->card;
-	struct sunxi_priv *priv = snd_soc_card_get_drvdata(card);
->>>>>>> patched
 
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_RESUME:
 	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
 		if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
-<<<<<<< current
 			sunxi_codec_capture_start(priv);
 		else
 			sunxi_codec_play_start(priv);
-=======
-			codec_capture_start(priv);
-		else
-			codec_play_start(priv);
->>>>>>> patched
 		break;
 	case SNDRV_PCM_TRIGGER_STOP:
 	case SNDRV_PCM_TRIGGER_SUSPEND:
 	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
 		if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
-<<<<<<< current
 			sunxi_codec_capture_stop(priv);
 		else
 			sunxi_codec_play_stop(priv);
-=======
-			codec_capture_stop(priv);
-		else
-			codec_play_stop(priv);
->>>>>>> patched
 		break;
 	default:
 		return -EINVAL;
@@ -357,7 +202,6 @@ static int sunxi_codec_prepare(struct snd_pcm_substream *substream,
 			       struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-<<<<<<< current
 	struct sunxi_priv *priv = snd_soc_card_get_drvdata(rtd->card);
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
@@ -385,39 +229,6 @@ static int sunxi_codec_prepare(struct snd_pcm_substream *substream,
 
 		/* enable VMIC */
 		regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x1 << SUNXI_ADC_ACTL_VMICEN, 0x1 << SUNXI_ADC_ACTL_VMICEN);
-=======
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_codec *codec = codec_dai->codec;
-	struct snd_soc_card *card = codec->card;
-	struct sunxi_priv *priv = snd_soc_card_get_drvdata(card);
-
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-		regmap_update_bits(priv->regmap, SUNXI_DAC_DPC, 0x1 << EN_DA, 0x1 << EN_DA);
-		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << DAC_FIFO_FLUSH, 0x1 << DAC_FIFO_FLUSH);
-		/* set TX FIFO send DRQ level */
-		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x3f << TX_TRIG_LEVEL, 0xf << TX_TRIG_LEVEL);
-		if (substream->runtime->rate > 32000) {
-			regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << FIR_VERSION, 0x0 << FIR_VERSION);
-		} else {
-			regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << FIR_VERSION, 0x1 << FIR_VERSION);
-		}
-		/* set TX FIFO MODE - 0 works for both 16 and 24 bits */
-		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << TX_FIFO_MODE, 0x0 << TX_FIFO_MODE);
-		/* send last sample when DAC FIFO under run */
-		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 0x1 << SEND_LASAT, 0x0 << SEND_LASAT);
-		/* enable dac analog */
-		regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << DACAENL, 0x1 << DACAENL);
-		regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << DACAENR, 0x1 << DACAENR);
-		/* enable DAC to PA */
-		regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x1 << DACPAS, 0x1 << DACPAS);
-	} else {
-		/* enable mic1 PA */
-		regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x1 << PREG1EN, 0x1 << PREG1EN);
-		/* mic1 gain 32dB */  /* FIXME - makes no sense */
-		regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x3 << 25, 0x1 << 25);
-		/* enable VMIC */
-		regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x1 << VMICEN, 0x1 << VMICEN);
->>>>>>> patched
 
 		if (priv->revision == SUN7I) {
 			/* boost up record effect */
@@ -425,7 +236,6 @@ static int sunxi_codec_prepare(struct snd_pcm_substream *substream,
 		}
 
 		/* enable ADC digital */
-<<<<<<< current
 		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << SUNXI_ADC_FIFOC_EN_AD, 0x1 << SUNXI_ADC_FIFOC_EN_AD);
 
 		/* set RX FIFO mode */
@@ -439,17 +249,6 @@ static int sunxi_codec_prepare(struct snd_pcm_substream *substream,
 
 		/* enable adc1 analog */
 		regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x3 << SUNXI_ADC_ACTL_ADCLEN, 0x3 << SUNXI_ADC_ACTL_ADCLEN);
-=======
-		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << EN_AD, 0x1 << EN_AD);
-		/* set RX FIFO mode */
-		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << RX_FIFO_MODE, 0x1 << RX_FIFO_MODE);
-		/* flush RX FIFO */
-		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0x1 << ADC_FIFO_FLUSH, 0x1 << ADC_FIFO_FLUSH);
-		/* set RX FIFO rec drq level */
-		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 0xf << RX_TRIG_LEVEL, 0x7 << RX_TRIG_LEVEL);
-		/* enable adc1 analog */
-		regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 0x3 << ADCLEN, 0x3 << ADCLEN);
->>>>>>> patched
 	}
 
 	return 0;
@@ -460,14 +259,7 @@ static int sunxi_codec_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-<<<<<<< current
 	struct sunxi_priv *priv = snd_soc_card_get_drvdata(rtd->card);
-=======
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_codec *codec = codec_dai->codec;
-	struct snd_soc_card *card = codec->card;
-	struct sunxi_priv *priv = snd_soc_card_get_drvdata(card);
->>>>>>> patched
 	int is_mono = !!(params_channels(params) == 1);
 	int is_24bit = !!(hw_param_interval(params, SNDRV_PCM_HW_PARAM_SAMPLE_BITS)->min == 32);
 	unsigned int rate = params_rate(params);
@@ -483,10 +275,6 @@ static int sunxi_codec_hw_params(struct snd_pcm_substream *substream,
 	case 11025:
 	case 7350:
 	default:
-<<<<<<< current
-=======
-		clk_set_rate(priv->clk_pll2, 22579200);
->>>>>>> patched
 		clk_set_rate(priv->clk_module, 22579200);
 		break;
 	case 192000:
@@ -497,10 +285,6 @@ static int sunxi_codec_hw_params(struct snd_pcm_substream *substream,
 	case 16000:
 	case 12000:
 	case 8000:
-<<<<<<< current
-=======
-		clk_set_rate(priv->clk_pll2, 24576000);
->>>>>>> patched
 		clk_set_rate(priv->clk_module, 24576000);
 		break;
 	}
@@ -542,27 +326,16 @@ static int sunxi_codec_hw_params(struct snd_pcm_substream *substream,
 	}
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-<<<<<<< current
 		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 7 << SUNXI_DAC_FIFOC_DAC_FS, hwrate << SUNXI_DAC_FIFOC_DAC_FS);
 		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 1 << SUNXI_DAC_FIFOC_MONO_EN, is_mono << SUNXI_DAC_FIFOC_MONO_EN);
 		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 1 << SUNXI_DAC_FIFOC_TX_SAMPLE_BITS, is_24bit << SUNXI_DAC_FIFOC_TX_SAMPLE_BITS);
-=======
-		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 7 << DAC_FS, hwrate << DAC_FS);
-		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 1 << DAC_MONO_EN, is_mono << DAC_MONO_EN);
-		regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 1 << TX_SAMPLE_BITS, is_24bit << TX_SAMPLE_BITS);
->>>>>>> patched
 		if (is_24bit)
 			priv->playback_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
 		else
 			priv->playback_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_2_BYTES;
 	} else  {
-<<<<<<< current
 		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 7 << SUNXI_DAC_FIFOC_DAC_FS, hwrate << SUNXI_DAC_FIFOC_DAC_FS);
 		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 1 << SUNXI_ADC_FIFOC_MONO_EN, is_mono << SUNXI_ADC_FIFOC_MONO_EN);
-=======
-		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 7 << DAC_FS, hwrate << DAC_FS);
-		regmap_update_bits(priv->regmap, SUNXI_ADC_FIFOC, 1 << ADC_MONO_EN, is_mono << ADC_MONO_EN);
->>>>>>> patched
 	}
 
 	return 0;
@@ -629,7 +402,6 @@ static int sunxi_codec_dai_probe(struct snd_soc_dai *dai)
 	return 0;
 }
 
-<<<<<<< current
 static void sunxi_codec_init(struct sunxi_priv *priv)
 {
 	regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 1 << SUNXI_DAC_FIFOC_FIR_VERSION, 1 << SUNXI_DAC_FIFOC_FIR_VERSION);
@@ -647,22 +419,13 @@ static void sunxi_codec_init(struct sunxi_priv *priv)
 		regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x3f << SUNXI_DAC_ACTL_PA_VOL, 0x3b << SUNXI_DAC_ACTL_PA_VOL);
 }
 
-=======
->>>>>>> patched
 static int sunxi_codec_startup(struct snd_pcm_substream *substream,
 			       struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-<<<<<<< current
 	struct sunxi_priv *priv = snd_soc_card_get_drvdata(rtd->card);
 
 	sunxi_codec_init(priv);
-=======
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_codec *codec = codec_dai->codec;
-	struct snd_soc_card *card = codec->card;
-	struct sunxi_priv *priv = snd_soc_card_get_drvdata(card);
->>>>>>> patched
 
 	return clk_prepare_enable(priv->clk_module);
 }
@@ -671,49 +434,12 @@ static void sunxi_codec_shutdown(struct snd_pcm_substream *substream,
 				 struct snd_soc_dai *dai)
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-<<<<<<< current
 	struct sunxi_priv *priv = snd_soc_card_get_drvdata(rtd->card);
-=======
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_codec *codec = codec_dai->codec;
-	struct snd_soc_card *card = codec->card;
-	struct sunxi_priv *priv = snd_soc_card_get_drvdata(card);
->>>>>>> patched
 
 	clk_disable_unprepare(priv->clk_module);
 }
 
-<<<<<<< current
 /*** Codec DAI ***/
-=======
-
-static int codec_init(struct sunxi_priv *priv)
-{
-	/* enable DAC digital */
-	regmap_update_bits(priv->regmap, SUNXI_DAC_DPC, 1 << EN_DA, 1 << EN_DA);
-
-	regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 1 << FIR_VERSION, 1 << FIR_VERSION);
-
-	/* set digital volume to maximum */
-	if (priv->revision == SUN4IA)
-		regmap_update_bits(priv->regmap, SUNXI_DAC_DPC, 0x3F << DVOL, 0 << DVOL);
-
-	/* PA mute */
-	regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 1 << PA_MUTE, 0 << PA_MUTE);
-
-	/* enable PA */
-	regmap_update_bits(priv->regmap, SUNXI_ADC_ACTL, 1 << PA_EN, 1 << PA_EN);
-	regmap_update_bits(priv->regmap, SUNXI_DAC_FIFOC, 3 << DAC_DRQ_CLR_CNT, 3 << DAC_DRQ_CLR_CNT);
-
-	/* set volume */
-	if (priv->revision == SUN4IA)
-		regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x3f << PAVOL, 1 << PAVOL);
-	else
-		regmap_update_bits(priv->regmap, SUNXI_DAC_ACTL, 0x3f << PAVOL, 0x3b << PAVOL);
-
-	return 0;
-}
->>>>>>> patched
 
 static const struct snd_soc_dai_ops sunxi_codec_dai_ops = {
 	.startup = sunxi_codec_startup,
@@ -724,14 +450,9 @@ static const struct snd_soc_dai_ops sunxi_codec_dai_ops = {
 };
 
 static struct snd_soc_dai_driver sunxi_codec_dai = {
-<<<<<<< current
 	.name = "Codec",
 	.playback = {
 		.stream_name = "Codec Playback",
-=======
-	.probe = sunxi_codec_dai_probe,
-	.playback = {
->>>>>>> patched
 		.channels_min = 1,
 		.channels_max = 2,
 		.rate_min = 8000,
@@ -740,7 +461,6 @@ static struct snd_soc_dai_driver sunxi_codec_dai = {
 			 SNDRV_PCM_RATE_22050| SNDRV_PCM_RATE_32000 | SNDRV_PCM_RATE_44100 |\
 			 SNDRV_PCM_RATE_48000 |SNDRV_PCM_RATE_96000 | SNDRV_PCM_RATE_192000 |\
 			 SNDRV_PCM_RATE_KNOT),
-<<<<<<< current
 		.formats = (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S32_LE),
 		.sig_bits = 24,
 	},
@@ -756,14 +476,10 @@ static struct snd_soc_dai_driver sunxi_codec_dai = {
 			 SNDRV_PCM_RATE_KNOT),
 		.formats = (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S32_LE),
 		.sig_bits = 24,
-=======
-		.formats = (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE),
->>>>>>> patched
 	},
 	.ops = &sunxi_codec_dai_ops,
 };
 
-<<<<<<< current
 /*** Codec ***/
 
 static const struct snd_kcontrol_new sunxi_pa =
@@ -832,27 +548,10 @@ static const struct snd_soc_dapm_widget codec_dapm_widgets[] = {
 	SND_SOC_DAPM_OUTPUT("Mic Bias"),
 	SND_SOC_DAPM_OUTPUT("HP Right"),
 	SND_SOC_DAPM_OUTPUT("HP Left"),
-=======
-static const struct snd_soc_component_driver sunxi_codec_component = {
-	.name = "sunxi-codec",
-};
-
-static const struct regmap_config sunxi_codec_regmap_config = {
-	.reg_bits = 32,
-	.reg_stride = 4,
-	.val_bits = 32,
-	.max_register = SUNXI_AC_MIC_PHONE_CAL,
-};
-
-static const struct snd_soc_dapm_widget codec_dapm_widgets[] = {
-	SND_SOC_DAPM_OUTPUT("Mic Bias"),
-	SND_SOC_DAPM_OUTPUT("HP_OUT"),
->>>>>>> patched
 	SND_SOC_DAPM_INPUT("MIC_IN"),
 	SND_SOC_DAPM_INPUT("LINE_IN"),
 };
 
-<<<<<<< current
 static const struct snd_soc_dapm_route codec_dapm_routes[] = {
 	/* DAC block */
 	{ "Left DAC", NULL, "Codec Playback" },
@@ -910,17 +609,6 @@ static struct snd_soc_dai_link cdc_dai = {
 	.cpu_dai_name = "1c22c00.codec",
 	.codec_name = "1c22c00.codec",
 	.platform_name = "1c22c00.codec",
-=======
-static struct snd_soc_dai_link cdc_dai = {
-	.name = "cdc",
-	.stream_name = "CDC PCM",
-	.codec_dai_name = "sunxi-codec-dai",
-	.cpu_dai_name = "1c22c00.codec",
-	.codec_name = "1c22c00.codec",
-	.platform_name = "1c22c00.codec",
-	//.init = tegra_wm8903_init,
-	//.ops = &tegra_wm8903_ops,
->>>>>>> patched
 	.dai_fmt = SND_SOC_DAIFMT_I2S,
 };
 
@@ -929,7 +617,6 @@ static struct snd_soc_card snd_soc_sunxi_codec = {
 	.owner = THIS_MODULE,
 	.dai_link = &cdc_dai,
 	.num_links = 1,
-<<<<<<< current
 	.dapm_widgets = sunxi_board_dapm_widgets,
 	.num_dapm_widgets = ARRAY_SIZE(sunxi_board_dapm_widgets),
 	.dapm_routes = sunxi_board_routing,
@@ -940,41 +627,22 @@ static struct snd_soc_card snd_soc_sunxi_codec = {
 
 static const struct snd_soc_component_driver sunxi_codec_component = {
 	.name = "sunxi-codec",
-=======
-};
-
-static struct snd_soc_codec_driver dummy_codec = {
-	.controls = sun7i_dac_ctls,
-	.num_controls = ARRAY_SIZE(sun7i_dac_ctls),
-	.dapm_widgets = codec_dapm_widgets,
-	.num_dapm_widgets = ARRAY_SIZE(codec_dapm_widgets),
->>>>>>> patched
 };
 
 #define SUNXI_RATES	SNDRV_PCM_RATE_8000_192000
 #define SUNXI_FORMATS	(SNDRV_PCM_FMTBIT_S16_LE | \
-<<<<<<< current
 			SNDRV_PCM_FMTBIT_S32_LE)
 
 static struct snd_soc_dai_driver dummy_cpu_dai = {
 	.name = "sunxi-cpu-dai",
 	.probe = sunxi_codec_dai_probe,
-=======
-			SNDRV_PCM_FMTBIT_S24_LE)
-
-static struct snd_soc_dai_driver dummy_dai = {
-	.name = "sunxi-codec-dai",
->>>>>>> patched
 	.playback = {
 		.stream_name	= "Playback",
 		.channels_min	= 1,
 		.channels_max	= 2,
 		.rates		= SUNXI_RATES,
 		.formats	= SUNXI_FORMATS,
-<<<<<<< current
 		.sig_bits	= 24,
-=======
->>>>>>> patched
 	},
 	.capture = {
 		.stream_name	= "Capture",
@@ -982,7 +650,6 @@ static struct snd_soc_dai_driver dummy_dai = {
 		.channels_max	= 2,
 		.rates 		= SUNXI_RATES,
 		.formats 	= SUNXI_FORMATS,
-<<<<<<< current
 		.sig_bits	= 24,
 	 },
 };
@@ -994,11 +661,6 @@ static const struct regmap_config sunxi_codec_regmap_config = {
 	.max_register = SUNXI_AC_MIC_PHONE_CAL,
 };
 
-=======
-	 },
-};
-
->>>>>>> patched
 static const struct of_device_id sunxi_codec_of_match[] = {
 	{ .compatible = "allwinner,sun4i-a10a-codec", .data = (void *)SUN4IA},
 	{ .compatible = "allwinner,sun4i-a10-codec", .data = (void *)SUN4I},
@@ -1052,47 +714,23 @@ static int sunxi_codec_probe(struct platform_device *pdev)
 		dev_err(dev, "failed to get apb clock\n");
 		return PTR_ERR(priv->clk_apb);
 	}
-<<<<<<< current
-=======
-	priv->clk_pll2 = devm_clk_get(dev, "pll");
-	if (IS_ERR(priv->clk_pll2)) {
-		dev_err(dev, "failed to get pll2 clock\n");
-		return PTR_ERR(priv->clk_pll2);
-	}
->>>>>>> patched
 	priv->clk_module = devm_clk_get(dev, "codec");
 	if (IS_ERR(priv->clk_module)) {
 		dev_err(dev, "failed to get codec clock\n");
 		return PTR_ERR(priv->clk_module);
 	}
 
-<<<<<<< current
 	/* Enable the clock on a basic rate */
 	ret = clk_set_rate(priv->clk_module, 24576000);
-=======
-	/* Enable PLL2 on a basic rate */
-	ret = clk_set_rate(priv->clk_pll2, 24576000);
->>>>>>> patched
 	if (ret) {
 		dev_err(dev, "failed to set codec base clock rate\n");
 		return ret;
 	}
-<<<<<<< current
-=======
-	if (clk_prepare_enable(priv->clk_pll2)) {
-		dev_err(dev, "failed to enable pll2 clock\n");
-		return -EINVAL;
-	}
->>>>>>> patched
 
 	/* Enable the bus clock */
 	if (clk_prepare_enable(priv->clk_apb)) {
 		dev_err(dev, "failed to enable apb clock\n");
-<<<<<<< current
 		clk_disable_unprepare(priv->clk_module);
-=======
-		clk_disable_unprepare(priv->clk_pll2);
->>>>>>> patched
 		return -EINVAL;
 	}
 
@@ -1106,15 +744,9 @@ static int sunxi_codec_probe(struct platform_device *pdev)
 	priv->capture_dma_data.maxburst = 4;
 	priv->capture_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_2_BYTES;
 
-<<<<<<< current
 	ret = snd_soc_register_codec(&pdev->dev, &sunxi_codec, &sunxi_codec_dai, 1);
 
 	ret = devm_snd_soc_register_component(&pdev->dev, &sunxi_codec_component, &dummy_cpu_dai, 1);
-=======
-	ret = snd_soc_register_codec(&pdev->dev, &dummy_codec, &dummy_dai, 1);
-
-	ret = devm_snd_soc_register_component(&pdev->dev, &sunxi_codec_component, &sunxi_codec_dai, 1);
->>>>>>> patched
 	if (ret)
 		goto err_clk_disable;
 
@@ -1122,11 +754,7 @@ static int sunxi_codec_probe(struct platform_device *pdev)
 	if (ret)
 		goto err_clk_disable;
 
-<<<<<<< current
 	sunxi_codec_init(priv);
-=======
-	codec_init(priv);
->>>>>>> patched
 
 	ret = snd_soc_register_card(card);
 	if (ret) {
@@ -1144,10 +772,6 @@ err_fini_utils:
 err:
 err_clk_disable:
 	clk_disable_unprepare(priv->clk_apb);
-<<<<<<< current
-=======
-	clk_disable_unprepare(priv->clk_pll2);
->>>>>>> patched
 	return ret;
 }
 
@@ -1156,11 +780,7 @@ static int sunxi_codec_remove(struct platform_device *pdev)
 	struct sunxi_priv *priv = platform_get_drvdata(pdev);
 
 	clk_disable_unprepare(priv->clk_apb);
-<<<<<<< current
 	clk_disable_unprepare(priv->clk_module);
-=======
-	clk_disable_unprepare(priv->clk_pll2);
->>>>>>> patched
 
 	return 0;
 }
