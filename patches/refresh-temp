Bottom: 747991009b9642ea8b3e2ca288f23b55b22d602d
Top:    b8f051c116cdcae65507f5655e1b8c6179140388
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2014-08-17 10:21:31 -0400

Refresh of pwm

---

diff --git a/drivers/pwm/pwm-sunxi.c b/drivers/pwm/pwm-sunxi.c
index 58880e1..4d2f0b1 100644
--- a/drivers/pwm/pwm-sunxi.c
+++ b/drivers/pwm/pwm-sunxi.c
@@ -186,7 +186,7 @@ static inline struct sunxi_pwm_chip *to_sunxi_chip(struct pwm_chip *chip)
  * min_optimal_period_cycles.  If none are found then root though again
  * taking anything that works
  */
-int pwm_get_best_prescale(int period_in) 
+int pwm_get_best_prescale(struct sunxi_pwm_chip *priv, int period_in) 
 {
 	int i;
 	unsigned long period = period_in * 1000; /* convert to picoseconds */
@@ -225,6 +225,7 @@ int pwm_get_best_prescale(int period_in)
 	if(best_prescale > ARRAY_SIZE(prescale_divisor))
 		return -EINVAL;
 
+	dev_dbg(priv->chip.dev, "Best prescale is %d\n", best_prescale);
 	return best_prescale;
 }
 
@@ -238,6 +239,7 @@ unsigned int get_entire_cycles(struct sunxi_pwm_chip *priv, int prescale, int pe
 	unsigned int entire_cycles;
 
 	clk_pico = 1000000L * prescale_divisor[prescale] / OSC24;
+	printk("JDS - clk_pico %ld\n", clk_pico);
 	entire_cycles = DIV_ROUND_CLOSEST(period * 1000L, clk_pico);
 	if (entire_cycles > MAX_CYCLES)
 		entire_cycles = MAX_CYCLES;
@@ -291,11 +293,18 @@ static int sunxi_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
 			  int duty_ns, int period_ns)
 {
 	struct sunxi_pwm_chip *priv = to_sunxi_chip(chip);
-	unsigned int prescale, entire_cycles, active_cycles, reg_val;
+	int prescale, entire_cycles, active_cycles;
+	unsigned int reg_val;
+
+	if (duty_ns <= 0)
+		return -EINVAL;
+	if (period_ns <= 0)
+		return -EINVAL;
 
 	printk("JDS - sunxi_pwm_config duty %d period %d\n", duty_ns, period_ns);
-	if (period_ns <= 50) {
-		// Just enable the OSC24 clock bypass 
+
+	// If period less than two cycles, just enable the OSC24 clock bypass 
+	if (period_ns < (2 * 1000 / OSC24 + 1)) {
 		switch (pwm->hwpwm) {
 		case 0:
 			regmap_update_bits(priv->regmap, SUNXI_PWM_CTRL_REG,
@@ -309,7 +318,7 @@ static int sunxi_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
 		return 0;
 	}
 
-	prescale = pwm_get_best_prescale(period_ns);
+	prescale = pwm_get_best_prescale(priv, period_ns);
 	if (prescale < 0)
 		return prescale;
 
diff --git a/sound/soc/sunxi/sunxi-i2s.c b/sound/soc/sunxi/sunxi-i2s.c
index f77f33c..e1061a2 100644
--- a/sound/soc/sunxi/sunxi-i2s.c
+++ b/sound/soc/sunxi/sunxi-i2s.c
@@ -119,14 +119,14 @@ void sunxi_snd_txctrl_i2s(struct sunxi_priv *priv, struct snd_pcm_substream *sub
 		regmap_update_bits(priv->regmap, SUNXI_I2S_INT, SUNXI_I2SINT_TXDRQEN_MASK, 0);
 	}
 
-/*	{
+	{
 	int i;
 	for (i = SUNXI_I2S_CTL; i <= SUNXI_I2S_RXCHMAP; i += 4)  {
 		regmap_read(priv->regmap, i, &reg_val);
 		printk("REG %02x VAL %08x\n", i, reg_val);
 	}
 	}
-*/
+
 }
 
 void sunxi_snd_rxctrl_i2s(struct sunxi_priv *priv, int on)
