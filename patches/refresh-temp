Bottom: 6363b268b500fcaa807afaf018b6dc438cc5299e
Top:    eec76c254c7029a3da4d5ad24cf36cbc1b7a2c4a
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2014-07-04 14:22:29 -0400

Refresh of temp

---

diff --git a/drivers/clk/sunxi/clk-factors.c b/drivers/clk/sunxi/clk-factors.c
index 3806d97..b953601 100644
--- a/drivers/clk/sunxi/clk-factors.c
+++ b/drivers/clk/sunxi/clk-factors.c
@@ -42,7 +42,7 @@
 static unsigned long clk_factors_recalc_rate(struct clk_hw *hw,
 					     unsigned long parent_rate)
 {
-	u8 n = 1, k = 0, p = 0, m = 0;
+	u8 n = 1, k = 0, p = 0, m = 0, q = 0;
 	u32 reg;
 	unsigned long rate;
 	struct clk_factors *factors = to_clk_factors(hw);
@@ -60,6 +60,8 @@ static unsigned long clk_factors_recalc_rate(struct clk_hw *hw,
 		m = FACTOR_GET(config->mshift, config->mwidth, reg);
 	if (config->pwidth != SUNXI_FACTORS_NOT_APPLICABLE)
 		p = FACTOR_GET(config->pshift, config->pwidth, reg);
+	if (config->qwidth != SUNXI_FACTORS_NOT_APPLICABLE)
+		q = FACTOR_GET(config->qshift, config->qwidth, reg);
 
 	/* Calculate the rate */
 	rate = (parent_rate * n * (k + 1) >> p) / (m + 1);
@@ -72,7 +74,7 @@ static long clk_factors_round_rate(struct clk_hw *hw, unsigned long rate,
 {
 	struct clk_factors *factors = to_clk_factors(hw);
 	factors->get_factors((u32 *)&rate, (u32)*parent_rate,
-			     NULL, NULL, NULL, NULL);
+			     NULL, NULL, NULL, NULL, NULL);
 
 	return rate;
 }
@@ -115,13 +117,13 @@ static long clk_factors_determine_rate(struct clk_hw *hw, unsigned long rate,
 static int clk_factors_set_rate(struct clk_hw *hw, unsigned long rate,
 				unsigned long parent_rate)
 {
-	u8 n = 0, k = 0, m = 0, p = 0;
+	u8 n = 0, k = 0, m = 0, p = 0, q =0;
 	u32 reg;
 	struct clk_factors *factors = to_clk_factors(hw);
 	struct clk_factors_config *config = factors->config;
 	unsigned long flags = 0;
 
-	factors->get_factors((u32 *)&rate, (u32)parent_rate, &n, &k, &m, &p);
+	factors->get_factors((u32 *)&rate, (u32)parent_rate, &n, &k, &m, &p, &q);
 
 	if (factors->lock)
 		spin_lock_irqsave(factors->lock, flags);
@@ -134,6 +136,7 @@ static int clk_factors_set_rate(struct clk_hw *hw, unsigned long rate,
 	reg = FACTOR_SET(config->kshift, config->kwidth, reg, k);
 	reg = FACTOR_SET(config->mshift, config->mwidth, reg, m);
 	reg = FACTOR_SET(config->pshift, config->pwidth, reg, p);
+	reg = FACTOR_SET(config->qshift, config->qwidth, reg, q);
 
 	/* Apply them now */
 	writel(reg, factors->reg);
diff --git a/drivers/clk/sunxi/clk-factors.h b/drivers/clk/sunxi/clk-factors.h
index 02e1a43..3c1114f 100644
--- a/drivers/clk/sunxi/clk-factors.h
+++ b/drivers/clk/sunxi/clk-factors.h
@@ -15,13 +15,15 @@ struct clk_factors_config {
 	u8 mwidth;
 	u8 pshift;
 	u8 pwidth;
+	u8 qshift;
+	u8 qwidth;
 };
 
 struct clk_factors {
 	struct clk_hw hw;
 	void __iomem *reg;
 	struct clk_factors_config *config;
-	void (*get_factors) (u32 *rate, u32 parent, u8 *n, u8 *k, u8 *m, u8 *p);
+	void (*get_factors) (u32 *rate, u32 parent, u8 *n, u8 *k, u8 *m, u8 *p, u8 *q);
 	spinlock_t *lock;
 };
 
diff --git a/drivers/clk/sunxi/clk-sunxi.c b/drivers/clk/sunxi/clk-sunxi.c
index fb2ce84..650aaaa 100644
--- a/drivers/clk/sunxi/clk-sunxi.c
+++ b/drivers/clk/sunxi/clk-sunxi.c
@@ -35,7 +35,7 @@ static DEFINE_SPINLOCK(clk_lock);
  */
 
 static void sun4i_get_pll1_factors(u32 *freq, u32 parent_rate,
-				   u8 *n, u8 *k, u8 *m, u8 *p)
+				   u8 *n, u8 *k, u8 *m, u8 *p, u8 *q)
 {
 	u8 div;
 
@@ -86,7 +86,7 @@ static void sun4i_get_pll1_factors(u32 *freq, u32 parent_rate,
  * parent_rate should always be 24MHz
  */
 static void sun6i_a31_get_pll1_factors(u32 *freq, u32 parent_rate,
-				       u8 *n, u8 *k, u8 *m, u8 *p)
+				       u8 *n, u8 *k, u8 *m, u8 *p, u8 *q)
 {
 	/*
 	 * We can operate only on MHz, this will make our life easier
@@ -171,7 +171,7 @@ static void sun6i_a31_get_pll1_factors(u32 *freq, u32 parent_rate,
  */
 
 static void sun4i_get_pll5_factors(u32 *freq, u32 parent_rate,
-				   u8 *n, u8 *k, u8 *m, u8 *p)
+				   u8 *n, u8 *k, u8 *m, u8 *p, u8 *q)
 {
 	u8 div;
 
@@ -203,7 +203,7 @@ static void sun4i_get_pll5_factors(u32 *freq, u32 parent_rate,
  */
 
 static void sun6i_a31_get_pll6_factors(u32 *freq, u32 parent_rate,
-				       u8 *n, u8 *k, u8 *m, u8 *p)
+				       u8 *n, u8 *k, u8 *m, u8 *p, u8 *q)
 {
 	u8 div;
 
@@ -235,7 +235,7 @@ static void sun6i_a31_get_pll6_factors(u32 *freq, u32 parent_rate,
  */
 
 static void sun4i_get_apb1_factors(u32 *freq, u32 parent_rate,
-				   u8 *n, u8 *k, u8 *m, u8 *p)
+				   u8 *n, u8 *k, u8 *m, u8 *p, u8 *q)
 {
 	u8 calcm, calcp;
 
@@ -278,7 +278,7 @@ static void sun4i_get_apb1_factors(u32 *freq, u32 parent_rate,
  */
 
 static void sun4i_get_mod0_factors(u32 *freq, u32 parent_rate,
-				   u8 *n, u8 *k, u8 *m, u8 *p)
+				   u8 *n, u8 *k, u8 *m, u8 *p, u8 *q)
 {
 	u8 div, calcm, calcp;
 
@@ -319,7 +319,7 @@ static void sun4i_get_mod0_factors(u32 *freq, u32 parent_rate,
  */
 
 static void sun7i_a20_get_out_factors(u32 *freq, u32 parent_rate,
-				      u8 *n, u8 *k, u8 *m, u8 *p)
+				      u8 *n, u8 *k, u8 *m, u8 *p, u8 *q)
 {
 	u8 div, calcm, calcp;
 
@@ -398,7 +398,7 @@ struct factors_data {
 	int enable;
 	int mux;
 	struct clk_factors_config *table;
-	void (*getter) (u32 *rate, u32 parent_rate, u8 *n, u8 *k, u8 *m, u8 *p);
+	void (*getter) (u32 *rate, u32 parent_rate, u8 *n, u8 *k, u8 *m, u8 *p, u8 *q);
 	const char *name;
 };
