Bottom: 2edbc737696fecf1a64ea208db16aaba57d10551
Top:    90a898bdb089d9a24e86de57d59f2be3caa65287
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2012-04-15 00:38:49 -0400

Refresh of dma.patch

---

diff --git a/drivers/net/ethernet/davicom/dm9000.c b/drivers/net/ethernet/davicom/dm9000.c
index 77edf3f..f8fd607 100644
--- a/drivers/net/ethernet/davicom/dm9000.c
+++ b/drivers/net/ethernet/davicom/dm9000.c
@@ -35,15 +35,11 @@
 #include <linux/platform_device.h>
 #include <linux/irq.h>
 #include <linux/slab.h>
-#include <linux/of_gpio.h>
 
 #include <asm/delay.h>
 #include <asm/irq.h>
 #include <asm/io.h>
 
-#include <linux/gpio.h>
-#include <mach/gpio.h>
-
 #include "dm9000.h"
 
 /* Board/System/Debug information/definition ---------------- */
@@ -100,7 +96,7 @@ typedef struct board_info {
 
 	void __iomem	*io_addr;	/* Register I/O base address */
 	void __iomem	*io_data;	/* Data I/O address */
-	unsigned long	 irq_flags;
+	u16		 irq;		/* IRQ */
 
 	u16		tx_pkt_cnt;
 	u16		queue_pkt_len;
@@ -127,6 +123,7 @@ typedef struct board_info {
 	struct resource *data_res;
 	struct resource	*addr_req;   /* resources requested */
 	struct resource *data_req;
+	struct resource *irq_res;
 
 	int		 irq_wake;
 
@@ -694,18 +691,17 @@ static void
 dm9000_release_board(struct platform_device *pdev, struct board_info *db)
 {
 	/* unmap our resources */
+
 	iounmap(db->io_addr);
 	iounmap(db->io_data);
 
 	/* release the resources */
-	if (db->data_req) {
-		release_resource(db->data_req);
-		kfree(db->data_req);
-	}
-	if (db->addr_req) {
-		release_resource(db->addr_req);
-		kfree(db->addr_req);
-	}
+
+	release_resource(db->data_req);
+	kfree(db->data_req);
+
+	release_resource(db->addr_req);
+	kfree(db->addr_req);
 }
 
 static unsigned char dm9000_type_to_char(enum dm9000_type type)
@@ -1170,7 +1166,7 @@ static int
 dm9000_open(struct net_device *dev)
 {
 	board_info_t *db = netdev_priv(dev);
-	unsigned long irqflags = db->irq_flags & IRQF_TRIGGER_MASK;
+	unsigned long irqflags = db->irq_res->flags & IRQF_TRIGGER_MASK;
 
 	if (netif_msg_ifup(db))
 		dev_dbg(db->dev, "enabling %s\n", dev->name);
@@ -1361,57 +1357,6 @@ static const struct net_device_ops dm9000_netdev_ops = {
 #endif
 };
 
-# define DM_IO_DELAY()	do { gpio_get_value(GPIO_MNAND_RYBN3);} while(0)
-
-static void dm9000_dumpblk(void __iomem *reg, int count)
-{
-	int i;
-	int tmp;
-
-	count = (count + 1) >> 1;
-	for (i = 0; i < count; i++) {
-		DM_IO_DELAY();
-		tmp = readw(reg);
-	}
-}
-
-static void dm9000_inblk(void __iomem *reg, void *data, int count)
-{
-	int i;
-	u16* pdata = (u16*)data;
-	count = (count + 1) >> 1;
-	for (i = 0; i < count; i++) {
-		DM_IO_DELAY();
-		*pdata++ = readw(reg);
-	}
-}
-
-#ifdef CONFIG_OF
-static int  __devinit
-of_gpio_to_irq(struct platform_device *pdev, int offset)
-{
-	int ret, gpio;
-	enum of_gpio_flags flags;
-
-	gpio = of_get_gpio_flags(pdev->dev.of_node, offset, &flags);
-	if (!gpio_is_valid(gpio)) {
-		dev_err(&pdev->dev, "invalid gpio #%d: %d\n", offset, gpio);
-		return gpio;
-	}
-	ret = gpio_request(gpio, dev_name(&pdev->dev));
-	if (ret) {
-		dev_err(&pdev->dev, "can't request gpio #%d: %d\n", offset, ret);
-		return ret;
-	}
-	ret = gpio_direction_input(gpio);
-	if (ret) {
-		dev_err(&pdev->dev, "can't set input direction for gpio #%d: %d\n", offset, ret);
-		return ret;
-	}
-	return gpio_to_irq(gpio);
-}
-#endif
-
 /*
  * Search DM9000 board, allocate space and register it
  */
@@ -1421,7 +1366,6 @@ dm9000_probe(struct platform_device *pdev)
 	struct dm9000_plat_data *pdata = pdev->dev.platform_data;
 	struct board_info *db;	/* Point a board information structure */
 	struct net_device *ndev;
-	struct resource *irq_res;
 	const unsigned char *mac_src;
 	int ret = 0;
 	int iosize;
@@ -1452,35 +1396,16 @@ dm9000_probe(struct platform_device *pdev)
 
 	db->addr_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	db->data_res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
-	if (db->addr_res == NULL || db->data_res == NULL ) {
+	db->irq_res  = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+
+	if (db->addr_res == NULL || db->data_res == NULL ||
+	    db->irq_res == NULL) {
 		dev_err(db->dev, "insufficient resources\n");
 		ret = -ENOENT;
 		goto out;
 	}
 
-	irq_res  = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
-	if (irq_res) {
-		ndev->irq	= irq_res->start;
-		db->irq_flags	= irq_res->flags;
-	} else {
-#ifdef CONFIG_OF
-		ret = of_gpio_to_irq(pdev, 0);
-		db->irq_flags = IORESOURCE_IRQ_HIGHLEVEL;
-#else
-		ret = -ENOENT;
-#endif
-		if (ret < 0) {
-			dev_err(db->dev, "missing irq %d\n", ret);
-			goto out;
-		}
-		ndev->irq = ret;
-	}
-
 	db->irq_wake = platform_get_irq(pdev, 1);
-#ifdef CONFIG_OF
-	if (db->irq_wake < 0)
-		db->irq_wake = of_gpio_to_irq(pdev, 1);
-#endif
 	if (db->irq_wake >= 0) {
 		dev_dbg(db->dev, "wakeup irq %d\n", db->irq_wake);
 
@@ -1538,11 +1463,10 @@ dm9000_probe(struct platform_device *pdev)
 		ret = -EINVAL;
 		goto out;
 	}
-/* fixme */
-pdata->flags		= DM9000_PLATF_16BITONLY | DM9000_PLATF_NO_EEPROM | DM9000_PLATF_SIMPLE_PHY;
 
 	/* fill in parameters for net-dev structure */
 	ndev->base_addr = (unsigned long)db->io_addr;
+	ndev->irq	= db->irq_res->start;
 
 	/* ensure at least we have a default set of IO routines */
 	dm9000_set_io(db, iosize);
@@ -1565,15 +1489,13 @@ pdata->flags		= DM9000_PLATF_16BITONLY | DM9000_PLATF_NO_EEPROM | DM9000_PLATF_S
 		 * over-rides */
 
 		if (pdata->inblk != NULL)
-//			db->inblk = pdata->inblk;
-			db->inblk = dm9000_inblk;
+			db->inblk = pdata->inblk;
 
 		if (pdata->outblk != NULL)
 			db->outblk = pdata->outblk;
 
 		if (pdata->dumpblk != NULL)
-//			db->dumpblk = pdata->dumpblk;
-			db->dumpblk = dm9000_dumpblk;
+			db->dumpblk = pdata->dumpblk;
 
 		db->flags = pdata->flags;
 	}
