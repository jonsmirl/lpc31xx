Bottom: 0b2651f850769ca2177b2f429233761b8a4f64b7
Top:    611f10335bde27dfdb549ae98d858241a687d803
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2012-04-01 00:50:51 -0400

Refresh of device-trees

---

diff --git a/arch/arm/boot/dts/ea3131.dts b/arch/arm/boot/dts/ea3131.dts
index 2ad2999..a754298 100644
--- a/arch/arm/boot/dts/ea3131.dts
+++ b/arch/arm/boot/dts/ea3131.dts
@@ -16,57 +16,50 @@
 		bootargs = "console=ttyS0,115200n8 root=/dev/mmcblk0p3 init=/etc/preinit rw rootwait loglevel=7";
 	};
 
-	apb@13008000 {
-		i2c@1300a000 {
-			slave-address = <0x6E>;
-			pca9532: leds@60 {
-				#gpio-cells = <2>;
-				compatible = "nxp,pca9532";
-				reg = <0x60>;
-				gpio-controller;
-			};
-			uda1380: codec@18 {
-				compatible = "nxp,uda1380";
-				reg = <0x18>;
-			};
+	i2c@1300a000 {
+		slave-address = <0x6E>;
+		pca9532: leds@60 {
+			#gpio-cells = <2>;
+			compatible = "nxp,pca9532";
+			reg = <0x60>;
+			gpio-controller;
 		};
 	};
-	apb@15000000 {
-		spi@15002000 {
-			s25sl032a@0 {
-				compatible = "code,s25sl032a";
-				spi-max-frequency = <1000000>;
-				reg = <0>;
-			};
-			ads7846@1 {
-				compatible = "ti,ads7846";
-				spi-max-frequency = <1200000>;
-				reg = <1>;
-				interrupts = <20>;
-				vref_delay_usecs = <100>;
-				x_plate_ohms = <419>;
-				y_plate_ohms = <486>;
-				pen_irq = <37>;
-				gpio_pendown = <&gpio_gpio 4 0>;
-				gpio_cs = <&gpio_ebi_i2stx_0 3 0>; 
-			};
+	i2c@1300a400 {
+		slave-address = <0x6E>;
+		uda1380: codec@1a {
+			compatible = "nxp,uda1380";
+			reg = <0x1a>;
+		};
+	};
+	spi@15002000 {
+		s25sl032a@0 {
+			compatible = "code,s25sl032a";
+			spi-max-frequency = <1000000>;
+			reg = <0>;
+		};
+		ads7846@1 {
+			compatible = "ti,ads7846";
+			spi-max-frequency = <1200000>;
+			reg = <1>;
+			interrupts = <20>;
+			vref_delay_usecs = <100>;
+			x_plate_ohms = <419>;
+			y_plate_ohms = <486>;
+			pen_irq = <37>;
+			gpio_pendown = <&gpio_gpio 4 0>;
+			gpio_cs = <&gpio_ebi_i2stx_0 3 0>; 
 		};
 	};
 	sound {
 		compatible = "ea,ea3131-uda1380";
-		is2-handle = <&i2s>;
-		codec-handle = <&uda1380>;
-		channel = <1>;
+		audio-codec = <&uda1380>;
+		i2s-controller = <&i2s>;
+		i2s-channel = <1>;
 	};
-	pcm {
-		compatible = "nxp,lpc313x-audio";
-	};
-
-	apb@17000000 {
-		nand@17000800 {
-			bank-width = <2>;
-			device-width = <1>;				
-		};
+	nand@17000800 {
+		bank-width = <2>;
+		device-width = <1>;				
 	};
 	sdmmc@18000000 {
 		slot@0 {
diff --git a/arch/arm/boot/dts/lpc3131.dtsi b/arch/arm/boot/dts/lpc3131.dtsi
index 15d6e11..7768a40 100644
--- a/arch/arm/boot/dts/lpc3131.dtsi
+++ b/arch/arm/boot/dts/lpc3131.dtsi
@@ -21,7 +21,6 @@
 			clock-frequency = <0>;		// from bootloader
 		};
 	};
-
 	isram0: memory@11028000 {
 		reg = <0x11028000 0x18000>;
 		interrupts = <28>;
@@ -30,227 +29,186 @@
 		reg = <0x11040000 0x18000>;
 		interrupts = <29>;
 	};
-	apb@13000000 {
-		compatible = "nxp,lpc31xx-apb", "simple-bus";
-		#address-cells = <1>;
-		#size-cells = <1>;
-		ranges = <0x13000000 0x13000000 0x8000>;
-
-		evtr@13000000 {
-			compatible = "nxp,lpc31xx-evtr";
-			reg = <0x13000000 0x800>;
-			interrupts = <1 2 3 4>;
-		};
-		adc@13002000 {
-			compatible = "nxp,lpc31xx-adc";
-			reg = <0x13002000 0x400>;
-			interrupts = <9>;
-		};
-		wdt@13002400 {
-			compatible = "nxp,lpc31xx-wdt";
-			reg = <0x13002400 0x400>;
-			interrupts = <30>;
-		};
-		sys@13002800 {
-			compatible = "nxp,lpc31xx-sys";
-			reg = <0x13002800 0x400>;
-		};
-		gpio_ebi_mci: gpio@13003000 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003000 0x40>;
-			gpio-controller;
-		};
-		gpio_ebi_i2stx_0: gpio@13003040 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003040 0x40>;
-			gpio-controller;
-		};
-		gpio_cgu: gpio@13003080 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003080 0x40>;
-			gpio-controller;
-		};
-		gpio_i2srx_0: gpio@130030c0 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x130030c0 0x40>;
-			gpio-controller;
-		};
-		gpio_i2srx_1: gpio@13003100 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003100 0x40>;
-			gpio-controller;
-		};
-		gpio_i2stx_1: gpio@13003140 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003140 0x40>;
-			gpio-controller;
-		};
-		gpio_ebi: gpio@13003180 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003180 0x40>;
-			gpio-controller;
-		};
-		gpio_gpio: gpio@130031c0 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x130031c0 0x40>;
-			gpio-controller;
-		};
-		gpio_i2c1: gpio@13003200 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003200 0x40>;
-			gpio-controller;
-		};
-		gpio_spi: gpio@13003240 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003240 0x40>;
-			gpio-controller;
-		};
-		gpio_nand_ctrl: gpio@13003280 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003280 0x40>;
-			gpio-controller;
-		};
-		gpio_pwm: gpio@130032c0 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x130032c0 0x40>;
-			gpio-controller;
-		};
-		gpio_uart: gpio@13003300 {
-			#gpio-cells = <2>;
-			compatible = "nxp,lpc31xx-gpio";
-			reg = <0x13003300 0x40>;
-			gpio-controller;
-		};
-		cgu@13004000 {
-			compatible = "nxp,lpc31xx-cgu";
-			reg = <0x13004000 0x1000>;
-		};
-		rng@13006000 {
-			compatible = "nxp,lpc31xx-rng";
-			reg = <0x13006000 0x200>;
-		};
+	evtr@13000000 {
+		compatible = "nxp,lpc31xx-evtr";
+		reg = <0x13000000 0x800>;
+		interrupts = <1 2 3 4>;
 	};
-	apb@13008000 {
-		compatible = "nxp,lpc31xx-apb", "simple-bus";
-		#address-cells = <1>;
-		#size-cells = <1>;
-		ranges = <0x13008000 0x13008000 0x4000>;
-
-		timer@13008000 {
-			compatible = "nxp,lpc31xx-timer";
-			reg = <0x13008000 0x400>;
-			interrupts = <5>;
-			cell-index = <0>;
-		};
-		timer@13008400 {
-			compatible = "nxp,lpc31xx-timer";
-			reg = <0x13008400 0x400>;
-			interrupts = <6>;
-			cell-index = <1>;
-		};
-		timer@13008800 {
-			compatible = "nxp,lpc31xx-timer";
-			reg = <0x13008800 0x400>;
-			interrupts = <7>;
-			cell-index = <2>;
-		};
-		timer@13008c00 {
-			compatible = "nxp,lpc31xx-timer";
-			reg = <0x13008c00 0x400>;
-			interrupts = <8>;
-			cell-index = <3>;
-		};
-		pwm@13009000 {
-			compatible = "nxp,lpc31xx-pwm";
-			reg = <0x13009000 0x200>;
-		};
-		i2c@1300a000 {
-			#address-cells = <1>;
-			#size-cells = <0>;
-			compatible = "nxp,lpc31xx-i2c", "nxp,pnx-i2c";
-			reg = <0x1300a000 0x400>;
-			interrupts = <11>;
-			cell-index = <0>;
-		};
-		i2c@1300a400 {
-			#address-cells = <1>;
-			#size-cells = <0>;
-			compatible = "nxp,lpc31xx-i2c", "nxp,pnx-i2c";
-			reg = <0x1300a400 0x400>;
-			interrupts = <12>;
-			cell-index = <1>;
-		};
+	adc@13002000 {
+		compatible = "nxp,lpc31xx-adc";
+		reg = <0x13002000 0x400>;
+		interrupts = <9>;
+	};
+	wdt@13002400 {
+		compatible = "nxp,lpc31xx-wdt";
+		reg = <0x13002400 0x400>;
+		interrupts = <30>;
+	};
+	sys@13002800 {
+		compatible = "nxp,lpc31xx-sys";
+		reg = <0x13002800 0x400>;
+	};
+	gpio_ebi_mci: gpio@13003000 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003000 0x40>;
+		gpio-controller;
+	};
+	gpio_ebi_i2stx_0: gpio@13003040 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003040 0x40>;
+		gpio-controller;
+	};
+	gpio_cgu: gpio@13003080 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003080 0x40>;
+		gpio-controller;
+	};
+	gpio_i2srx_0: gpio@130030c0 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x130030c0 0x40>;
+		gpio-controller;
 	};
-	apb@15000000 {
-		compatible = "nxp,lpc31xx-apb", "simple-bus";
+	gpio_i2srx_1: gpio@13003100 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003100 0x40>;
+		gpio-controller;
+	};
+	gpio_i2stx_1: gpio@13003140 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003140 0x40>;
+		gpio-controller;
+	};
+	gpio_ebi: gpio@13003180 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003180 0x40>;
+		gpio-controller;
+	};
+	gpio_gpio: gpio@130031c0 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x130031c0 0x40>;
+		gpio-controller;
+	};
+	gpio_i2c1: gpio@13003200 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003200 0x40>;
+		gpio-controller;
+	};
+	gpio_spi: gpio@13003240 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003240 0x40>;
+		gpio-controller;
+	};
+	gpio_nand_ctrl: gpio@13003280 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003280 0x40>;
+		gpio-controller;
+	};
+	gpio_pwm: gpio@130032c0 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x130032c0 0x40>;
+		gpio-controller;
+	};
+	gpio_uart: gpio@13003300 {
+		#gpio-cells = <2>;
+		compatible = "nxp,lpc31xx-gpio";
+		reg = <0x13003300 0x40>;
+		gpio-controller;
+	};
+	cgu@13004000 {
+		compatible = "nxp,lpc31xx-cgu";
+		reg = <0x13004000 0x1000>;
+	};
+	rng@13006000 {
+		compatible = "nxp,lpc31xx-rng";
+		reg = <0x13006000 0x200>;
+	};
+	timer@13008000 {
+		compatible = "nxp,lpc31xx-timer";
+		reg = <0x13008000 0x400>;
+		interrupts = <5>;
+	};
+	timer@13008400 {
+		compatible = "nxp,lpc31xx-timer";
+		reg = <0x13008400 0x400>;
+		interrupts = <6>;
+	};
+	timer@13008800 {
+		compatible = "nxp,lpc31xx-timer";
+		reg = <0x13008800 0x400>;
+		interrupts = <7>;
+	};
+	timer@13008c00 {
+		compatible = "nxp,lpc31xx-timer";
+		reg = <0x13008c00 0x400>;
+		interrupts = <8>;
+	};
+	pwm@13009000 {
+		compatible = "nxp,lpc31xx-pwm";
+		reg = <0x13009000 0x200>;
+	};
+	i2c@1300a000 {
 		#address-cells = <1>;
-		#size-cells = <1>;
-		ranges = <0x15000000 0x15000000 0x3000>;
-
-		pcm@15000000 {
-			compatible = "nxp,lpc31xx-pcm";
-			reg = <0x15000000 0x400>;
-			interrupts = <14>;
-		};
-		lcd@15000400 {
-			compatible = "nxp,lpc31xx-lcd";
-			reg = <0x15000400 0x400>;
-			interrupts = <18>;
-		};
-		uart@15001000 {
-			compatible = "nxp,lpc31xx-uart";
-			reg = <0x15001000 0x1000>;
-			interrupts = <10>;
-			clock-frequency = <0>;		// from bootloader
-		};
-		spi@15002000 {
-			compatible = "nxp,lpc31xx-spi";
-			reg = <0x15002000 0x1000>;
-			interrupts = <19 20 21 22 23>;
-			#address-cells = <1>;
-			#size-cells = <0>;				
-		};
+		#size-cells = <0>;
+		compatible = "nxp,lpc31xx-i2c", "nxp,pnx-i2c";
+		reg = <0x1300a000 0x400>;
+		interrupts = <11>;
 	};
-	apb@16000000 {
-		compatible = "nxp,lpc31xx-apb", "simple-bus";
+	i2c@1300a400 {
 		#address-cells = <1>;
-		#size-cells = <1>;
-		ranges = <0x16000000 0x16000000 0x1000>;
-
-		i2s: i2s@16000000 {
-			compatible = "nxp,lpc31xx-i2s";
-			reg = <0x16000000 0x1000>;
-			interrupts = <13 14 15 16>;
-		};
+		#size-cells = <0>;
+		compatible = "nxp,lpc31xx-i2c", "nxp,pnx-i2c";
+		reg = <0x1300a400 0x400>;
+		interrupts = <12>;
+	};
+	pcm@15000000 {
+		compatible = "nxp,lpc31xx-pcm";
+		reg = <0x15000000 0x400>;
+		interrupts = <14>;
+	};
+	lcd@15000400 {
+		compatible = "nxp,lpc31xx-lcd";
+		reg = <0x15000400 0x400>;
+		interrupts = <18>;
 	};
-	apb@17000000 {
-		compatible = "nxp,lpc31xx-apb", "simple-bus";
+	uart@15001000 {
+		compatible = "nxp,lpc31xx-uart";
+		reg = <0x15001000 0x1000>;
+		interrupts = <10>;
+		clock-frequency = <0>;		// from bootloader
+	};
+	spi@15002000 {
+		compatible = "nxp,lpc31xx-spi";
+		reg = <0x15002000 0x1000>;
+		interrupts = <19 20 21 22 23>;
 		#address-cells = <1>;
-		#size-cells = <1>;
-		ranges = <0x17000000 0x17000000 0x1000>;
-
-		dma@17000000 {
-			compatible = "nxp,lpc31xx-dma";
-			reg = <0x17000000 0x800>;
-			interrupts = <24>;
-		};
-		nand@17000800 {
-			compatible = "nxp,lpc31xx-nand";
-			reg = <0x17000800 0x800>;
-			interrupts = <25>;
-		};
+		#size-cells = <0>;				
+	};
+	i2s: i2s@16000000 {
+		compatible = "nxp,lpc31xx-i2s";
+		reg = <0x16000000 0x1000>;
+		interrupts = <13 14 15 16>;
+	};
+	dma@17000000 {
+		compatible = "nxp,lpc31xx-dma";
+		reg = <0x17000000 0x800>;
+		interrupts = <24>;
+	};
+	nand@17000800 {
+		compatible = "nxp,lpc31xx-nand";
+		reg = <0x17000800 0x800>;
+		interrupts = <25>;
 	};
 	mpmc@17008000 {
 		compatible = "nxp,lpc31xx-mpmc";
diff --git a/arch/arm/mach-lpc31xx/Makefile b/arch/arm/mach-lpc31xx/Makefile
index e6aec70..a40b338 100644
--- a/arch/arm/mach-lpc31xx/Makefile
+++ b/arch/arm/mach-lpc31xx/Makefile
@@ -4,7 +4,7 @@
 
 # Object file lists.
 
-obj-y			+= irq.o time.o generic.o dma.o usb.o wdt.o clock.o
+obj-y += irq.o time.o generic.o dma.o usb.o wdt.o clock.o sram.o
 obj-$(CONFIG_OF) += dt.o
 
 
diff --git a/arch/arm/mach-lpc31xx/generic.c b/arch/arm/mach-lpc31xx/generic.c
index 024ec0b..9765b48 100644
--- a/arch/arm/mach-lpc31xx/generic.c
+++ b/arch/arm/mach-lpc31xx/generic.c
@@ -111,87 +111,71 @@ static struct platform_device serial_device = {
 	},
 };
 
+struct platform_device lpc31xx_pcm_device = {
+	.name = "lpc31xx-pcm-audio",
+	.id = -1,
+};
 
 static struct platform_device *devices[] __initdata = {
 	&serial_device,
+	&lpc31xx_pcm_device,
 };
 
 static struct map_desc lpc313x_io_desc[] __initdata = {
 	{
-		.virtual	= io_p2v(IO_INTC_PHYS),
-		.pfn		= __phys_to_pfn(IO_INTC_PHYS),
-		.length		= IO_INTC_SIZE,
-		.type		= MT_DEVICE
-	},
-	{
-		.virtual	= io_p2v(IO_APB01_PHYS),
-		.pfn		= __phys_to_pfn(IO_APB01_PHYS),
-		.length		= IO_APB01_SIZE,
+		.virtual	= io_p2v(IO_APB1_PHYS),
+		.pfn		= __phys_to_pfn(IO_APB1_PHYS),
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
 	{
 		.virtual	= io_p2v(IO_APB2_PHYS),
 		.pfn		= __phys_to_pfn(IO_APB2_PHYS),
-		.length		= IO_APB2_SIZE,
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
 	{
 		.virtual	= io_p2v(IO_APB3_PHYS),
 		.pfn		= __phys_to_pfn(IO_APB3_PHYS),
-		.length		= IO_APB3_SIZE,
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
 	{
 		.virtual	= io_p2v(IO_APB4_PHYS),
 		.pfn		= __phys_to_pfn(IO_APB4_PHYS),
-		.length		= IO_APB4_SIZE,
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
 	{
-		.virtual	= io_p2v(IO_MPMC_CFG_PHYS),
-		.pfn		= __phys_to_pfn(IO_MPMC_CFG_PHYS),
-		.length		= IO_MPMC_CFG_SIZE,
-		.type		= MT_DEVICE
-	},
-	{
-		.virtual	= io_p2v(IO_NAND_BUF_PHYS),
-		.pfn		= __phys_to_pfn(IO_NAND_BUF_PHYS),
-		.length		= IO_NAND_BUF_SIZE,
-		.type		= MT_DEVICE
-	},
-	{
-		.virtual	= io_p2v(IO_ISRAM0_PHYS),
-		.pfn		= __phys_to_pfn(IO_ISRAM0_PHYS),
-		.length		= IO_ISRAM0_SIZE,
+		.virtual	= io_p2v(IO_SDMMC_PHYS),
+		.pfn		= __phys_to_pfn(IO_SDMMC_PHYS),
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
-#ifdef CONFIG_OF
 	{
 		.virtual	= io_p2v(IO_USB_PHYS),
 		.pfn		= __phys_to_pfn(IO_USB_PHYS),
-		.length		= IO_USB_SIZE,
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
-
 	{
-		.virtual	= io_p2v(IO_SDMMC_PHYS),
-		.pfn		= __phys_to_pfn(IO_SDMMC_PHYS),
-		.length		= IO_SDMMC_SIZE,
+		.virtual	= io_p2v(EXT_SRAM0_PHYS),
+		.pfn		= __phys_to_pfn(EXT_SRAM0_PHYS),
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
 	{
-		.virtual	= io_p2v(EXT_SRAM0_PHYS),
-		.pfn		= __phys_to_pfn(EXT_SRAM0_PHYS),
-		.length		= SZ_4K,
+		.virtual	= io_p2v(IO_INTC_PHYS),
+		.pfn		= __phys_to_pfn(IO_INTC_PHYS),
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
 	{
-		.virtual	= io_p2v(EXT_SRAM1_PHYS + 0x10000),
-		.pfn		= __phys_to_pfn(EXT_SRAM1_PHYS + 0x10000),
-		.length		= SZ_4K,
+		.virtual	= io_p2v(IO_NAND_BUF_PHYS),
+		.pfn		= __phys_to_pfn(IO_NAND_BUF_PHYS),
+		.length		= SZ_1M,
 		.type		= MT_DEVICE
 	},
-#endif
 };
 
 void __init lpc313x_map_io(void)
@@ -256,9 +240,7 @@ void __init lpc313x_init(void)
 
 	lpc313x_uart_init();
 
-#ifndef CONFIG_OF
 	return platform_add_devices(devices, ARRAY_SIZE(devices));
-#endif
 }
 
 
diff --git a/arch/arm/mach-lpc31xx/include/mach/constants.h b/arch/arm/mach-lpc31xx/include/mach/constants.h
index 81233a6..b645671 100644
--- a/arch/arm/mach-lpc31xx/include/mach/constants.h
+++ b/arch/arm/mach-lpc31xx/include/mach/constants.h
@@ -70,8 +70,8 @@
 
 /* SoC CPU IO addressing */
 /* APB0 & APB1 address range*/
-#define IO_APB01_PHYS     (0x13000000)
-#define IO_APB01_SIZE     (0x0000B000)
+#define IO_APB1_PHYS      (0x13000000)
+#define IO_APB1_SIZE      (0x0000B000)
 /* APB2 address range*/
 #define IO_APB2_PHYS      (0x15000000)
 #define IO_APB2_SIZE      (0x00003000)
@@ -82,8 +82,8 @@
 #define IO_APB4_PHYS      (0x17000000)
 #define IO_APB4_SIZE      (0x00001000)
 /* DMA registers address range*/
-#define IO_DMA_REG_PHYS  (DMA_PHYS)
-#define IO_DMA_REG_SIZE  (0x0000800)
+#define IO_DMA_REG_PHYS   (DMA_PHYS)
+#define IO_DMA_REG_SIZE   (0x0000800)
 /* MPMC config registers address range*/
 #define IO_MPMC_CFG_PHYS  (0x17008000)
 #define IO_MPMC_CFG_SIZE  (0x00001000)
diff --git a/arch/arm/mach-lpc31xx/sram.c b/arch/arm/mach-lpc31xx/sram.c
new file mode 100644
index 0000000..701e760
--- /dev/null
+++ b/arch/arm/mach-lpc31xx/sram.c
@@ -0,0 +1,76 @@
+/*
+ * LPC313x sram driver
+ *
+ * Copyright (C) 2012 Jon Smirl <jonsmirl@gmail.com?
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; version 2 of the License
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+
+static int lpc313x_sram_probe(struct platform_device *pdev)
+{
+#if 0
+	/* number of slave select bits is required */
+	prop = of_get_property(pdev->dev.of_node, "mpmc-config", &len);
+	if (prop && len >= sizeof(*prop))
+		num_cs = __be32_to_cpup(prop);
+
+	MPMC_STCONFIG1 = 0x81;
+	MPMC_STWTWEN1 = 1;
+	MPMC_STWTOEN1 = 1;
+	MPMC_STWTRD1 = 4;
+	MPMC_STWTPG1 = 1;
+	MPMC_STWTWR1 = 1;
+	MPMC_STWTTURN1 = 2;
+	/* enable oe toggle between consec reads */
+	SYS_MPMC_WTD_DEL1 = _BIT(5) | 4;
+#endif
+	return 0;
+}
+
+static const struct of_device_id lpc313x_sram_of_match[] = {
+	{ .compatible = "nxp,lpc31xx-sram" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, lpc313x_sram_of_match);
+
+static struct platform_driver lpc313x_sram_driver = {
+	.probe = lpc313x_sram_probe,
+	.driver = {
+			.owner = THIS_MODULE,
+			.name = "lpc313x-sram",
+			.of_match_table = lpc313x_sram_of_match,
+		   },
+};
+
+static int __init lpc313x_sram_init(void)
+{
+	return platform_driver_register(&lpc313x_sram_driver);
+}
+
+static void __exit lpc313x_sram_exit(void)
+{
+	platform_driver_unregister(&lpc313x_sram_driver);
+}
+
+module_init(lpc313x_sram_init);
+module_exit(lpc313x_sram_exit);
+
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
+MODULE_DESCRIPTION("Driver for the LPC313x sram");
+MODULE_LICENSE("GPL");
diff --git a/drivers/i2c/i2c-core.c b/drivers/i2c/i2c-core.c
index e9c1893..7587197 100644
--- a/drivers/i2c/i2c-core.c
+++ b/drivers/i2c/i2c-core.c
@@ -531,6 +531,7 @@ i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info)
 
 	/* Check for address business */
 	status = i2c_check_addr_busy(adap, client->addr);
+printk("JDS i2c status %d\n", status);
 	if (status)
 		goto out_err;
 
diff --git a/dt_config b/dt_config
index 8001b7b..5ac5df2 100644
--- a/dt_config
+++ b/dt_config
@@ -255,7 +255,7 @@ CONFIG_MMU=y
 # CONFIG_ARCH_VT8500 is not set
 # CONFIG_ARCH_ZYNQ is not set
 CONFIG_ARCH_LPC31XX=y
-CONFIG_GPIO_PCA953X=y
+# CONFIG_GPIO_PCA953X is not set
 
 #
 # System MMU
@@ -1089,7 +1089,6 @@ CONFIG_GPIO_SYSFS=y
 #
 # CONFIG_GPIO_MAX7300 is not set
 # CONFIG_GPIO_MAX732X is not set
-CONFIG_GPIO_PCA953X_IRQ=y
 # CONFIG_GPIO_PCF857X is not set
 # CONFIG_GPIO_SX150X is not set
 # CONFIG_GPIO_ADP5588 is not set
diff --git a/sound/soc/codecs/uda1380.c b/sound/soc/codecs/uda1380.c
index 562a393..197463a 100644
--- a/sound/soc/codecs/uda1380.c
+++ b/sound/soc/codecs/uda1380.c
@@ -148,6 +148,7 @@ static void uda1380_sync_cache(struct snd_soc_codec *codec)
 static int uda1380_reset(struct snd_soc_codec *codec)
 {
 	struct uda1380_platform_data *pdata = codec->dev->platform_data;
+	int temp;
 
 	if (gpio_is_valid(pdata->gpio_reset)) {
 		gpio_set_value(pdata->gpio_reset, 1);
@@ -160,10 +161,13 @@ static int uda1380_reset(struct snd_soc_codec *codec)
 		data[1] = 0;
 		data[2] = 0;
 
-		if (codec->hw_write(codec->control_data, data, 3) != 3) {
+		printk("JDS reset 1\n");
+		if ((temp = codec->hw_write(codec->control_data, data, 3)) != 3) {
+			printk("JDS reset 2 %d\n", temp);
 			dev_err(codec->dev, "%s: failed\n", __func__);
 			return -EIO;
 		}
+		printk("JDS reset 3\n");
 	}
 
 	return 0;
@@ -728,6 +732,14 @@ static int uda1380_resume(struct snd_soc_codec *codec)
 	return 0;
 }
 
+#ifdef CONFIG_OF
+struct uda1380_platform_data of_pdata = {
+	.gpio_reset = -EINVAL,
+	.gpio_power = -EINVAL,
+	.dac_clk = UDA1380_DAC_CLK_SYSCLK,
+};
+#endif
+
 static int uda1380_probe(struct snd_soc_codec *codec)
 {
 	struct uda1380_platform_data *pdata =codec->dev->platform_data;
@@ -739,8 +751,12 @@ static int uda1380_probe(struct snd_soc_codec *codec)
 	codec->hw_write = (hw_write_t)i2c_master_send;
 	codec->control_data = uda1380->control_data;
 
+#ifdef CONFIG_OF
+	codec->dev->platform_data = pdata = &of_pdata;
+#else
 	if (!pdata)
 		return -EINVAL;
+#endif
 
 	if (gpio_is_valid(pdata->gpio_reset)) {
 		ret = gpio_request_one(pdata->gpio_reset, GPIOF_OUT_INIT_LOW,
diff --git a/sound/soc/lpc313x/ea3131-uda1380.c b/sound/soc/lpc313x/ea3131-uda1380.c
index e19fae2..220b7fd 100644
--- a/sound/soc/lpc313x/ea3131-uda1380.c
+++ b/sound/soc/lpc313x/ea3131-uda1380.c
@@ -140,10 +140,8 @@ static struct snd_soc_dai_link ea3131_uda1380_dai[] = {
 	{
 		.name = "uda1380",
 		.stream_name = "uda1380",
-		.codec_name	= "uda1380-codec.1-001a",
-		.cpu_dai_name = "16000000.i2s",
 		.codec_dai_name = "uda1380-hifi",
-		.platform_name	= "pcm.8",
+		.platform_name	= "lpc31xx-pcm-audio",
 		.init = ea3131_uda1380_init,
 		.ops = &ea3131_uda1380_ops,
 	},
@@ -170,7 +168,7 @@ static struct i2c_board_info i2c_board_info[] = {
 
 static struct platform_device *ea3131_snd_device;
 
-static int __devinit ea3131_asoc_probe(struct platform_device *pd)
+static int __devinit ea3131_asoc_probe(struct platform_device *pdev)
 {
 	struct platform_device *snd_dev;
 	int ret = 0;
@@ -196,19 +194,40 @@ static int __devinit ea3131_asoc_probe(struct platform_device *pd)
 
 	snd_dev = platform_device_alloc("soc-audio", -1);
 	if (!snd_dev) {
-		dev_err(&pd->dev, "failed to alloc soc-audio device\n");
+		dev_err(&pdev->dev, "failed to alloc soc-audio device\n");
 		return -ENOMEM;
 	}
 
+	ea3131_uda1380_dai[0].codec_of_node = of_parse_phandle(
+			pdev->dev.of_node, "audio-codec", 0);
+	if (!ea3131_uda1380_dai[0].codec_of_node) {
+		dev_err(&pdev->dev,
+			"Property 'audio-codec' missing or invalid\n");
+		ret = -EINVAL;
+		goto err;
+	}
+
+	ea3131_uda1380_dai[0].cpu_dai_of_node = of_parse_phandle(
+			pdev->dev.of_node, "i2s-controller", 0);
+	if (!ea3131_uda1380_dai[0].cpu_dai_of_node) {
+		dev_err(&pdev->dev,
+			"Property 'i2s-controller' missing or invalid\n");
+		ret = -EINVAL;
+		goto err;
+	}
+
 	platform_set_drvdata(snd_dev, &snd_soc_machine_ea3131);
 
 	ret = platform_device_add(snd_dev);
 	if (ret) {
-		dev_err(&pd->dev, "failed to add soc-audio dev\n");
+		dev_err(&pdev->dev, "failed to add soc-audio dev\n");
 		return -ENODEV;
 	}
 
-	platform_set_drvdata(pd, snd_dev);
+	platform_set_drvdata(pdev, snd_dev);
+	return 0;
+
+err:
 	return ret;
 }
 
diff --git a/sound/soc/lpc313x/lpc313x-pcm.c b/sound/soc/lpc313x/lpc313x-pcm.c
index 8bd3a5a..5af9b97 100644
--- a/sound/soc/lpc313x/lpc313x-pcm.c
+++ b/sound/soc/lpc313x/lpc313x-pcm.c
@@ -33,7 +33,7 @@
 #include <mach/dma.h>
 #include "lpc313x-pcm.h"
 
-#define SND_NAME "lpc313x-audio"
+#define SND_NAME "lpc31xx-pcm-audio"
 static u64 lpc313x_pcm_dmamask = DMA_BIT_MASK(32);
 
 #if defined (CONFIG_SND_USE_DMA_LINKLIST)
@@ -543,21 +543,10 @@ static int __devexit lpc313x_asoc_platform_remove(struct platform_device *pdev)
 	return 0;
 }
 
-#if defined(CONFIG_OF)
-static const struct of_device_id lpc313x_dma_of_match[] = {
-	{ .compatible = "nxp,lpc313x-audio" },
-	{},
-};
-MODULE_DEVICE_TABLE(of, lpc313x_dma_of_match);
-#endif
-
 static struct platform_driver lpc313x_dma_driver = {
 	.driver = {
 		.name = SND_NAME,
 		.owner = THIS_MODULE,
-#ifdef CONFIG_OF
-		.of_match_table = lpc313x_dma_of_match,
-#endif
 	},
 
 	.probe = lpc313x_asoc_platform_probe,
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index 92cee24..306a577 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -22,6 +22,8 @@
  *   o Support TDM on PCM and I2S
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
