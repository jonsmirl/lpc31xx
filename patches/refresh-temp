Bottom: 29c0f6a3e6254e359aa1279dfeae5daa613920cb
Top:    07bc6fe92f07a19caf9f3f65b4a6a0ebfe932f01
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2012-10-15 19:29:06 -0400

Refresh of usb-temp2

---

diff --git a/arch/arm/mach-lpc31xx/usb.c b/arch/arm/mach-lpc31xx/usb.c
index cda1ce0..c23e768 100644
--- a/arch/arm/mach-lpc31xx/usb.c
+++ b/arch/arm/mach-lpc31xx/usb.c
@@ -160,22 +160,6 @@ static struct platform_device lpc313x_udc_device = {
 };
 #endif
 
-#if defined(CONFIG_USB_EHCI_HCD) || defined(CONFIG_USB_OTG)
-
-static struct platform_device lpc313x_ehci_device = {
-	.name		= "lpc-ehci",
-	.dev = {
-		.dma_mask          = &usb_dmamask,
-		.coherent_dma_mask = 0xffffffff,
-		.release           = lpc313x_usb_release,
-		.platform_data     = &lpc313x_fsl_config,
-	},
-	.num_resources = ARRAY_SIZE(lpc313x_usb_resource),
-	.resource      = lpc313x_usb_resource,
-};
-#endif
-
-
 /*-------------------------------------------------------------------------*/
 static void	lpc313x_usb_release(struct device *dev)
 {
@@ -255,12 +239,6 @@ int __init usbotg_init(void)
 #endif
 	} else {
 #if defined(CONFIG_USB_EHCI_HCD)
-		/* register host */
-		printk(KERN_INFO "Registering USB host 0x%08x 0x%08x (%d)\n", USB_DEV_OTGSC, EVRT_RSR(bank), bank);
-		retval = platform_device_register(&lpc313x_ehci_device);
-		if ( 0 != retval )
-			printk(KERN_INFO "Can't register lpc313x_ehci_device device\n");
-
 		/* Create VBUS enable timer */
 		setup_timer(&lpc313x_usb_brd.vbus_timer, lpc313x_vbusen_timer,
 				(unsigned long)&lpc313x_usb_brd);
diff --git a/drivers/usb/host/ehci-lpc.c b/drivers/usb/host/ehci-lpc.c
index 45b3922..ca31dc6 100644
--- a/drivers/usb/host/ehci-lpc.c
+++ b/drivers/usb/host/ehci-lpc.c
@@ -90,6 +90,19 @@ static const struct hc_driver lpc_ehci_hc_driver = {
 	.clear_tt_buffer_complete = ehci_clear_tt_buffer_complete,
 };
 
+static struct fsl_usb2_platform_data lpc313x_fsl_config = {
+#if defined(CONFIG_USB_OTG) || (defined(CONFIG_USB_EHCI_HCD) && defined(CONFIG_USB_GADGET_FSL_USB2))
+	.operating_mode = FSL_USB2_DR_OTG,
+#elif defined(CONFIG_USB_GADGET_FSL_USB2) && !defined(CONFIG_USB_EHCI_HCD)
+	.operating_mode = FSL_USB2_DR_DEVICE,
+#elif !defined(CONFIG_USB_GADGET_FSL_USB2) && defined(CONFIG_USB_EHCI_HCD)
+	.operating_mode = FSL_USB2_DR_HOST,
+#endif
+	.phy_mode = FSL_USB2_PHY_UTMI,
+};
+
+static u64 usb_dmamask = 0xffffffffUL;;
+
 static int lpc_ehci_probe(struct platform_device *pdev)
 {
 	struct fsl_usb2_platform_data *pdata;
@@ -102,8 +115,13 @@ static int lpc_ehci_probe(struct platform_device *pdev)
 	if (usb_disabled())
 		return -ENODEV;
 
+	pdev->dev.dma_mask          = &usb_dmamask,
+	pdev->dev.coherent_dma_mask = 0xffffffff,
+
+
 	/* Need platform data for setup */
 	pdata = (struct fsl_usb2_platform_data *)pdev->dev.platform_data;
+	pdata = &lpc313x_fsl_config;
 	if (!pdata) {
 		dev_err(&pdev->dev,
 			"No platform data for %s.\n", dev_name(&pdev->dev));
@@ -130,6 +148,7 @@ static int lpc_ehci_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 	irq = res->start;
+printk("JDS usb IRQ %d\n", irq);
 
 	hcd = usb_create_hcd(driver, &pdev->dev, dev_name(&pdev->dev));
 	if (!hcd) {
@@ -147,14 +166,16 @@ static int lpc_ehci_probe(struct platform_device *pdev)
 	}
 	hcd->rsrc_start = res->start;
 	hcd->rsrc_len = res->end - res->start + 1;
-/*	
+printk("JDS usb res->start %x\n", res->start);
+printk("JDS usb res->end %x\n", res->end);
+
 	if (!request_mem_region(hcd->rsrc_start, hcd->rsrc_len,
 				driver->description)) {
 		dev_dbg(&pdev->dev, "controller already in use\n");
 		retval = -EBUSY;
 		goto fail_request_resource;
 	}
-*/
+
 	hcd->regs = ioremap_nocache(hcd->rsrc_start, hcd->rsrc_len);
 	if (hcd->regs == NULL) {
 		dev_dbg(&pdev->dev, "error mapping memory\n");
@@ -356,6 +377,14 @@ static int lpc313x_ehci_resume(struct platform_device * pdev)
 	return 0;
 }
 
+#if defined(CONFIG_OF)
+static const struct of_device_id ehci_lpc_of_match[] = {
+	{ .compatible = "nxp,lpc31xx-usb" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, ehci_lpc_of_match);
+#endif
+
 static struct platform_driver ehci_lpc_driver = {
 	.probe = lpc_ehci_probe,
 	.remove = lpc_ehci_remove,
@@ -367,6 +396,9 @@ static struct platform_driver ehci_lpc_driver = {
 		.suspend = lpc_ehci_suspend,
 		.resume  = lpc_ehci_resume,
 #endif
+#ifdef CONFIG_OF
+		.of_match_table = ehci_lpc_of_match,
+#endif
 	},
 };
