Bottom: cb9a06ee0947891fb744441360cf92ea9007ff38
Top:    7b104bf047f830b0a6a1540e4fbf57a1b6288d2e
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2014-08-18 09:54:23 -0400

Refresh of sgtl5000

---

diff --git a/arch/arm/boot/dts/sun7i-a20-cubietruck.dts b/arch/arm/boot/dts/sun7i-a20-cubietruck.dts
index 7fe6355..96913bb 100644
--- a/arch/arm/boot/dts/sun7i-a20-cubietruck.dts
+++ b/arch/arm/boot/dts/sun7i-a20-cubietruck.dts
@@ -157,7 +157,7 @@
 			sgtl5000: sgtl5000@a {
 				compatible = "fsl,sgtl5000";
 				reg = <0x0a>;
-				pwms = <&pwm 0 200 0>;
+				pwms = <&pwm 0 40 0>;
 
 				#sound-dai-cells = <0>;
 				VDDA-supply = <&reg_vcc3v3>;
diff --git a/sound/soc/generic/simple-card.c b/sound/soc/generic/simple-card.c
index 231d2c2..2bc4085 100644
--- a/sound/soc/generic/simple-card.c
+++ b/sound/soc/generic/simple-card.c
@@ -8,6 +8,9 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+
+#define DEBUG
+
 #include <linux/clk.h>
 #include <linux/device.h>
 #include <linux/module.h>
diff --git a/sound/soc/sunxi/sunxi-i2s.c b/sound/soc/sunxi/sunxi-i2s.c
index e1061a2..27505b8 100644
--- a/sound/soc/sunxi/sunxi-i2s.c
+++ b/sound/soc/sunxi/sunxi-i2s.c
@@ -153,18 +153,11 @@ void sunxi_snd_rxctrl_i2s(struct sunxi_priv *priv, int on)
 	}
 }
 
-static inline int sunxi_snd_is_clkmaster(struct sunxi_priv *priv)
-{
-	u32 reg_val;
-
-	regmap_read(priv->regmap, SUNXI_I2S_CTL, &reg_val);
-	return ((reg_val & SUNXI_I2SCTL_MS_MASK) ? 0 : 1);
-}
-
 static int sunxi_i2s_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt)
 {
 	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
 	u32 reg_val;
+	int ret;
 
 	printk("JDS - sunxi_i2s_set_fmt %08x\n", fmt);
 
@@ -187,6 +180,16 @@ static int sunxi_i2s_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt)
 		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_MS_MASK, 0);
 		printk("JDS - sunxi_i2s_set_fmt master\n");
 		priv->master = 1;
+		/* Enable iis on a basic rate */
+		ret = clk_set_rate(priv->clk_iis, 24576000);
+		if (ret) {
+			dev_err(priv->dev, "failed to set i2s base clock rate\n");
+			return ret;
+		}
+		if (clk_prepare_enable(priv->clk_iis)) {
+			dev_err(priv->dev, "failed to enable iis clock\n");
+			return -EINVAL;
+		}
 		break;
 	default:
 		return -EINVAL;
@@ -576,6 +579,7 @@ static const struct regmap_config sunxi_i2s_regmap_config = {
 	.val_bits	= 32,
 	.max_register 	= SUNXI_I2S_RXCHMAP,
 	.volatile_table	= &sunxi_i2s_volatile_regs,
+	.fast_io	= true,
 };
 
 static const struct of_device_id sunxi_i2s_of_match[] = {
@@ -609,6 +613,7 @@ static int sunxi_i2s_probe(struct platform_device *pdev)
 		return -ENOMEM;
 
 	priv->revision = (enum sunxi_soc_family)of_id->data;
+	priv->dev = &pdev->dev;
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	base = devm_ioremap_resource(dev, res);
@@ -631,7 +636,7 @@ static int sunxi_i2s_probe(struct platform_device *pdev)
 		dev_err(dev, "failed to get iis clock\n");
 		return PTR_ERR(priv->clk_iis);
 	}
-
+#ifdef JDS
 	/* Enable iis on a basic rate */
 	ret = clk_set_rate(priv->clk_iis, 24576000);
 	if (ret) {
@@ -642,7 +647,7 @@ static int sunxi_i2s_probe(struct platform_device *pdev)
 		dev_err(dev, "failed to enable iis clock\n");
 		return -EINVAL;
 	}
-
+#endif
 	/* Enable the bus clock */
 	if (clk_prepare_enable(priv->clk_apb)) {
 		dev_err(dev, "failed to enable apb clock\n");
diff --git a/sound/soc/sunxi/sunxi-i2s.h b/sound/soc/sunxi/sunxi-i2s.h
index 0401af7..ccd8906 100644
--- a/sound/soc/sunxi/sunxi-i2s.h
+++ b/sound/soc/sunxi/sunxi-i2s.h
@@ -393,6 +393,7 @@ struct sunxi_priv {
 	struct clk *clk_apb, *clk_iis, *clk_mclk;
 	struct clk_divider mclk_div;
 	int master, sysclk;
+	struct device *dev;
 
 	struct snd_dmaengine_dai_dma_data playback_dma_data;
 	struct snd_dmaengine_dai_dma_data capture_dma_data;
