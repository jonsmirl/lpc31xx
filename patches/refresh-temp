Bottom: 19a597544a09e58be7944976c3684b2d4cc9d410
Top:    274820e36e012ba511c16096bc824df4c663d1ed
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2012-04-15 19:36:14 -0400

Refresh of irq.patch

---

diff --git a/arch/arm/mach-lpc31xx/evtr.c b/arch/arm/mach-lpc31xx/evtr.c
index 3966c84..16ca828 100644
--- a/arch/arm/mach-lpc31xx/evtr.c
+++ b/arch/arm/mach-lpc31xx/evtr.c
@@ -344,7 +344,6 @@ static IRQ_EVENT_MAP_T irq_2_event[] = BOARD_IRQ_EVENT_MAP;
 
 static void evt_mask_irq(struct irq_data *data)
 {
-	printk("mask irq %d\n", data->irq);
 	u32 bank = EVT_GET_BANK(irq_2_event[data->irq - IRQ_EVT_START].event_pin);
 	u32 bit_pos = irq_2_event[data->irq - IRQ_EVT_START].event_pin & 0x1F;
 
@@ -353,7 +352,6 @@ static void evt_mask_irq(struct irq_data *data)
 
 static void evt_unmask_irq(struct irq_data *data)
 {
-	printk("unmask irq %d\n", data->irq);
 	u32 bank = EVT_GET_BANK(irq_2_event[data->irq - IRQ_EVT_START].event_pin);
 	u32 bit_pos = irq_2_event[data->irq - IRQ_EVT_START].event_pin & 0x1F;
 
@@ -373,7 +371,6 @@ static int evt_set_type(struct irq_data *data, unsigned int flow_type)
 	u32 bank = EVT_GET_BANK(irq_2_event[data->irq - IRQ_EVT_START].event_pin);
 	u32 bit_pos = irq_2_event[data->irq - IRQ_EVT_START].event_pin & 0x1F;
 
-	printk("set type %d %x\n", data->irq, flow_type);
 	switch (flow_type) {
 	case IRQ_TYPE_EDGE_RISING:
 		EVRT_APR(bank) |= _BIT(bit_pos);
@@ -431,7 +428,7 @@ static struct irq_chip lpc31xx_evtr_chip = {
 	.irq_unmask = evt_unmask_irq,
 	.irq_set_type = evt_set_type,
 	.irq_set_wake = evt_set_wake,
-	//.irq_startup = evt_startup,
+	.irq_startup = evt_startup,
 };
 
 
@@ -442,7 +439,6 @@ static struct irq_chip lpc31xx_evtr_chip = {
 		if (IRQ_EVTR##n##_START == IRQ_EVTR##n##_END) { \
 			/* translate IRQ number */ \
 			irq = IRQ_EVTR##n##_START; \
-			printk("handle a irq %d\n", irq); \
 			generic_handle_irq(irq); \
 		} else { \
 			for (irq = IRQ_EVTR##n##_START; irq <= IRQ_EVTR##n##_END; irq++) {  \
@@ -452,7 +448,6 @@ static struct irq_chip lpc31xx_evtr_chip = {
 				status = EVRT_OUT_PEND(n, bank); \
 				if (status & _BIT(bit_pos)) { \
 					generic_handle_irq(irq); \
-					printk("handle b irq %d\n", irq); \
 				} \
 			} \
 		} \
diff --git a/arch/arm/mach-lpc31xx/usb.c b/arch/arm/mach-lpc31xx/usb.c
index 4439b03..8b17bac 100644
--- a/arch/arm/mach-lpc31xx/usb.c
+++ b/arch/arm/mach-lpc31xx/usb.c
@@ -255,13 +255,14 @@ int __init usbotg_init(void)
 		lpc313x_usb_brd.vbus_ovrc_irq = IRQ_VBUS_OVRC;
 #endif
 
+#if 0
 		/* request IRQ to handle VBUS power event */
 		retval = request_irq( lpc313x_usb_brd.vbus_ovrc_irq, lpc313x_vbus_ovrc_irq, 
 			IRQF_DISABLED, "VBUSOVR", 
 			&lpc313x_usb_brd);
-
 		if ( 0 != retval )
 			printk(KERN_INFO "Unable to register IRQ_VBUS_OVRC handler\n");
+#endif
 		
 #else
 		printk(KERN_ERR "Unable to register USB host. Check USB_ID jumper!!!!!\n");
diff --git a/drivers/net/ethernet/davicom/dm9000.c b/drivers/net/ethernet/davicom/dm9000.c
index 761926c..3b1f5cd 100644
--- a/drivers/net/ethernet/davicom/dm9000.c
+++ b/drivers/net/ethernet/davicom/dm9000.c
@@ -662,7 +662,6 @@ dm9000_poll_work(struct work_struct *w)
 	board_info_t *db = container_of(dw, board_info_t, phy_poll);
 	struct net_device *ndev = db->ndev;
 
-printk("dm9000_poll_work\n");
 	if (db->flags & DM9000_PLATF_SIMPLE_PHY &&
 	    !(db->flags & DM9000_PLATF_EXT_PHY)) {
 		unsigned nsr = dm9000_read_locked(db, DM9000_NSR);
@@ -1071,7 +1070,6 @@ static irqreturn_t dm9000_interrupt(int irq, void *dev_id)
 	unsigned long flags;
 	u8 reg_save;
 
-	printk("dm9000_interrupt\n");
 	dm9000_dbg(db, 3, "entering %s\n", __func__);
 
 	/* A real interrupt coming */
@@ -1366,7 +1364,8 @@ static const struct net_device_ops dm9000_netdev_ops = {
 #endif
 };
 
-# define DM_IO_DELAY()	do { gpio_get_value(GPIO_MNAND_RYBN3);} while(0)
+//# define DM_IO_DELAY()	do { gpio_get_value(GPIO_MNAND_RYBN3);} while(0)
+# define DM_IO_DELAY()	do {} while(0)
 
 static void dm9000_dumpblk(void __iomem *reg, int count)
 {
