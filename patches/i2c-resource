Bottom: 82d6dfaf114e6b7489b8e929cdf5b671646c329f
Top:    dd0047e7bb1a861ecf832b0748df7fc63c0b1e09
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2012-03-24 15:38:34 -0400

Fix pnx driver to take standard driver resources


---

diff --git a/arch/arm/mach-lpc31xx/clock.c b/arch/arm/mach-lpc31xx/clock.c
index 281a3f5..2bc3921 100644
--- a/arch/arm/mach-lpc31xx/clock.c
+++ b/arch/arm/mach-lpc31xx/clock.c
@@ -1062,6 +1062,8 @@ EXPORT_SYMBOL(clk_get_rate);
 static struct clk_lookup lookups[] = {
 	_REGISTER_CLOCK("pnx-i2c.0", NULL, clk_i2c0)
 	_REGISTER_CLOCK("pnx-i2c.1", NULL, clk_i2c1)
+	_REGISTER_CLOCK("1300a000.i2c", NULL, clk_i2c0)
+	_REGISTER_CLOCK("1300a400.i2c", NULL, clk_i2c1)
 	_REGISTER_CLOCK(NULL, "nand_s0", clk_nand_s0)
 	_REGISTER_CLOCK(NULL, "nand_ecc", clk_nand_ecc)
 	_REGISTER_CLOCK(NULL, "nand_clk", clk_nand_clk)
diff --git a/arch/arm/mach-lpc31xx/i2c.c b/arch/arm/mach-lpc31xx/i2c.c
index 1515c3e..5b8b7de 100644
--- a/arch/arm/mach-lpc31xx/i2c.c
+++ b/arch/arm/mach-lpc31xx/i2c.c
@@ -80,19 +80,6 @@ static u32 calculate_input_freq(struct platform_device *pdev)
 	return (FFAST_CLOCK/1000000);
 }
 
-
-static struct i2c_pnx_data lpc_pnx_data0 = {
-	.name = I2C_CHIP_NAME "0",
-	.base = I2C0_PHYS,
-	.irq = IRQ_I2C0,
-};
-
-static struct i2c_pnx_data lpc_pnx_data1 = {
-	.name = I2C_CHIP_NAME "1",
-	.base = I2C1_PHYS,
-	.irq = IRQ_I2C1,
-};
-
 static struct i2c_pnx_algo_data i2c0_algo_data;
 static struct i2c_pnx_algo_data i2c1_algo_data;
 
@@ -101,7 +88,6 @@ static struct i2c_pnx_algo_data i2c0_algo_data = {
 		.name = I2C_CHIP_NAME "0",
 		.algo_data = &i2c0_algo_data,
 	},
-	.i2c_pnx = &lpc_pnx_data0,
 };
 
 static struct i2c_pnx_algo_data i2c1_algo_data = {
@@ -109,23 +95,46 @@ static struct i2c_pnx_algo_data i2c1_algo_data = {
 		.name = I2C_CHIP_NAME "1",
 		.algo_data = &i2c1_algo_data,
 	},
-	.i2c_pnx = &lpc_pnx_data1,
+};
+
+static struct resource i2c0_resource[] = {
+	[0] = {
+		.start = I2C0_PHYS,
+		.end   = I2C0_PHYS + 0x400,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= IRQ_I2C0,
+		.end	= IRQ_I2C0,
+		.flags	= IORESOURCE_IRQ,
+	},
 };
 
 static struct platform_device i2c0_device = {
 	.name = "pnx-i2c",
 	.id = 0,
-	.dev = {
-		.platform_data = &lpc_pnx_data0,
+	.num_resources	= ARRAY_SIZE(i2c0_resource),
+	.resource	= i2c0_resource,
+};
+
+static struct resource i2c1_resource[] = {
+	[0] = {
+		.start = I2C1_PHYS,
+		.end   = I2C1_PHYS + 0x400,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= IRQ_I2C1,
+		.end	= IRQ_I2C1,
+		.flags	= IORESOURCE_IRQ,
 	},
 };
 
 static struct platform_device i2c1_device = {
 	.name = "pnx-i2c",
 	.id = 1,
-	.dev = {
-		.platform_data = &lpc_pnx_data1,
-	},
+	.num_resources	= ARRAY_SIZE(i2c1_resource),
+	.resource	= i2c1_resource,
 };
 
 static struct platform_device *devices[] __initdata = {
diff --git a/drivers/i2c/busses/i2c-pnx.c b/drivers/i2c/busses/i2c-pnx.c
index bee912b..c0bf133 100644
--- a/drivers/i2c/busses/i2c-pnx.c
+++ b/drivers/i2c/busses/i2c-pnx.c
@@ -572,14 +572,8 @@ static int __devinit i2c_pnx_probe(struct platform_device *pdev)
 	int ret = 0;
 	struct i2c_pnx_algo_data *alg_data;
 	unsigned long freq;
-	struct i2c_pnx_data *i2c_pnx = pdev->dev.platform_data;
-
-	if (!i2c_pnx || !i2c_pnx->name) {
-		dev_err(&pdev->dev, "%s: no platform data supplied\n",
-		       __func__);
-		ret = -EINVAL;
-		goto out;
-	}
+	struct resource *res;
+	static char *name ="i2c-pnx";
 
 	alg_data = kzalloc(sizeof(*alg_data), GFP_KERNEL);
 	if (!alg_data) {
@@ -589,13 +583,14 @@ static int __devinit i2c_pnx_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, alg_data);
 
-	strlcpy(alg_data->adapter.name, i2c_pnx->name,
-		sizeof(alg_data->adapter.name));
 	alg_data->adapter.dev.parent = &pdev->dev;
 	alg_data->adapter.algo = &pnx_algorithm;
 	alg_data->adapter.algo_data = alg_data;
 	alg_data->adapter.nr = pdev->id;
-	alg_data->i2c_pnx = i2c_pnx;
+	alg_data->adapter.dev.parent = &pdev->dev;
+#ifdef CONFIG_OF
+	alg_data->adapter.dev.of_node = of_node_get(pdev->dev.of_node);
+#endif
 
 	alg_data->clk = clk_get(&pdev->dev, NULL);
 	if (IS_ERR(alg_data->clk)) {
@@ -608,16 +603,24 @@ static int __devinit i2c_pnx_probe(struct platform_device *pdev)
 	alg_data->mif.timer.data = (unsigned long)alg_data;
 
 	/* Register I/O resource */
-	if (!request_mem_region(i2c_pnx->base, I2C_PNX_REGION_SIZE,
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (res == NULL) {
+		dev_err(&pdev->dev, "Unable to get resources.\n");
+		return -ENXIO;
+	}
+	sprintf(alg_data->adapter.name, "%08x.i2c", res->start);
+
+	if (!request_mem_region(res->start, I2C_PNX_REGION_SIZE,
 				pdev->name)) {
 		dev_err(&pdev->dev,
 		       "I/O region 0x%08x for I2C already in use.\n",
-		       i2c_pnx->base);
+		       res->start);
 		ret = -ENODEV;
 		goto out_clkget;
 	}
 
-	alg_data->ioaddr = ioremap(i2c_pnx->base, I2C_PNX_REGION_SIZE);
+	alg_data->base = res->start;
+	alg_data->ioaddr = ioremap(res->start, I2C_PNX_REGION_SIZE);
 	if (!alg_data->ioaddr) {
 		dev_err(&pdev->dev, "Couldn't ioremap I2C I/O region\n");
 		ret = -ENOMEM;
@@ -654,7 +657,8 @@ static int __devinit i2c_pnx_probe(struct platform_device *pdev)
 	}
 	init_completion(&alg_data->mif.complete);
 
-	ret = request_irq(i2c_pnx->irq, i2c_pnx_interrupt,
+	alg_data->irq = platform_get_irq(pdev, 0);
+	ret = request_irq(alg_data->irq, i2c_pnx_interrupt,
 			0, pdev->name, alg_data);
 	if (ret)
 		goto out_clock;
@@ -667,18 +671,18 @@ static int __devinit i2c_pnx_probe(struct platform_device *pdev)
 	}
 
 	dev_dbg(&pdev->dev, "%s: Master at %#8x, irq %d.\n",
-	       alg_data->adapter.name, i2c_pnx->base, i2c_pnx->irq);
+	       alg_data->adapter.name, res->start, alg_data->irq);
 
 	return 0;
 
 out_irq:
-	free_irq(i2c_pnx->irq, alg_data);
+	free_irq(alg_data->irq, alg_data);
 out_clock:
 	clk_disable(alg_data->clk);
 out_unmap:
 	iounmap(alg_data->ioaddr);
 out_release:
-	release_mem_region(i2c_pnx->base, I2C_PNX_REGION_SIZE);
+	release_mem_region(res->start, I2C_PNX_REGION_SIZE);
 out_clkget:
 	clk_put(alg_data->clk);
 out_drvdata:
@@ -692,13 +696,12 @@ out:
 static int __devexit i2c_pnx_remove(struct platform_device *pdev)
 {
 	struct i2c_pnx_algo_data *alg_data = platform_get_drvdata(pdev);
-	struct i2c_pnx_data *i2c_pnx = alg_data->i2c_pnx;
 
-	free_irq(i2c_pnx->irq, alg_data);
+	free_irq(alg_data->irq, alg_data);
 	i2c_del_adapter(&alg_data->adapter);
 	clk_disable(alg_data->clk);
 	iounmap(alg_data->ioaddr);
-	release_mem_region(i2c_pnx->base, I2C_PNX_REGION_SIZE);
+	release_mem_region(alg_data->base, I2C_PNX_REGION_SIZE);
 	clk_put(alg_data->clk);
 	kfree(alg_data);
 	platform_set_drvdata(pdev, NULL);
@@ -706,10 +709,21 @@ static int __devexit i2c_pnx_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#if defined(CONFIG_OF)
+static const struct of_device_id i2c_pnx_of_match[] = {
+	{ .compatible = "nxp,pnx-i2c" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, i2c_pnx_of_match);
+#endif
+
 static struct platform_driver i2c_pnx_driver = {
 	.driver = {
 		.name = "pnx-i2c",
 		.owner = THIS_MODULE,
+#ifdef CONFIG_OF
+			.of_match_table = i2c_pnx_of_match,
+#endif
 	},
 	.probe = i2c_pnx_probe,
 	.remove = __devexit_p(i2c_pnx_remove),
diff --git a/include/linux/i2c-pnx.h b/include/linux/i2c-pnx.h
index a87124d..e857166 100644
--- a/include/linux/i2c-pnx.h
+++ b/include/linux/i2c-pnx.h
@@ -29,8 +29,9 @@ struct i2c_pnx_algo_data {
 	struct i2c_pnx_mif	mif;
 	int			last;
 	struct clk		*clk;
-	struct i2c_pnx_data	*i2c_pnx;
 	struct i2c_adapter	adapter;
+	void __iomem *base;
+	int irq;
 };
 
 struct i2c_pnx_data {
