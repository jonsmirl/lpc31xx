Bottom: 05a34a1f868c44ffeb87c8ca45db515e6b4a9ea9
Top:    967444b14e734f1635c924c76b631ce1cf63c1df
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2012-04-21 23:06:31 -0400

intr domain irq


---

diff --git a/arch/arm/mach-lpc31xx/evtr.c b/arch/arm/mach-lpc31xx/evtr.c
index fcd1b48..853f04d 100644
--- a/arch/arm/mach-lpc31xx/evtr.c
+++ b/arch/arm/mach-lpc31xx/evtr.c
@@ -352,9 +352,6 @@ static int __devinit lpc31xx_evtr_probe(struct platform_device *pdev)
 	}
 	evtr_domain = irq_domain_add_linear(np, num_events, &evtr_ops, NULL);
 
-	/* Now configure external/board interrupts using event router */
-	for (irq = 0; irq < num_events; irq++) {
-	}
 	/* for power management. Wake from internal irqs */
 	EVRT_APR(3) &= ~_BIT(12);
 	EVRT_ATR(3) &= ~_BIT(12);
diff --git a/arch/arm/mach-lpc31xx/generic.c b/arch/arm/mach-lpc31xx/generic.c
index d257d47..88553e2 100644
--- a/arch/arm/mach-lpc31xx/generic.c
+++ b/arch/arm/mach-lpc31xx/generic.c
@@ -90,7 +90,8 @@ static struct plat_serial8250_port platform_serial_ports[] = {
 	{
 		.membase = (void *)io_p2v(UART_PHYS),
 		.mapbase = (unsigned long)UART_PHYS,
-		.irq = IRQ_UART,
+		//.irq = IRQ_UART,
+		.irq = 13,
 		.uartclk = XTAL_CLOCK,
 		.regshift = 2,
 		.iotype = UPIO_MEM,
@@ -266,7 +267,8 @@ static int __init lpc31xx_init_console(void)
 
 	up.membase = (char *) io_p2v(UART_PHYS);
 	up.mapbase = (unsigned long)UART_PHYS,
-	up.irq = IRQ_UART;
+//	up.irq = IRQ_UART;
+	up.irq = 13;
 	up.uartclk = XTAL_CLOCK;
 	/* check what FDR bootloader is using */
 	mul = (UART_FDR_REG >> 4) & 0xF;
diff --git a/arch/arm/mach-lpc31xx/irq.c b/arch/arm/mach-lpc31xx/irq.c
index 8de96b1..8727e9f 100644
--- a/arch/arm/mach-lpc31xx/irq.c
+++ b/arch/arm/mach-lpc31xx/irq.c
@@ -26,6 +26,7 @@
 #include <linux/timer.h>
 #include <linux/of_irq.h>
 #include <linux/irqdomain.h>
+#include <linux/of_address.h>
 
 #include <mach/hardware.h>
 #include <asm/irq.h>
@@ -37,28 +38,28 @@
 #define EVT_GET_BANK(evt)	(((evt) >> 5) & 0x3)
 #define EVT_arm926_nirq		0x6C
 
-extern void __init lpc31xx_init_evtr(void);
+static struct irq_domain *intc_domain;
 
 static void intc_mask_irq(struct irq_data *data)
 {
-	INTC_REQ_REG(data->irq) = INTC_REQ_WE_ENABLE;
+	INTC_REQ_REG(data->hwirq) = INTC_REQ_WE_ENABLE;
 }
 
 static void intc_unmask_irq(struct irq_data *data)
 {
-	INTC_REQ_REG(data->irq) = INTC_REQ_ENABLE | INTC_REQ_WE_ENABLE;
+	INTC_REQ_REG(data->hwirq) = INTC_REQ_ENABLE | INTC_REQ_WE_ENABLE;
 }
 
 static int intc_set_wake(struct irq_data *data, unsigned int on)
 {
-	static u32 wake_ints = 0;
+	static uint32_t wake_ints = 0;
 
 	if (on)
 		/* save the irqs which wake */
-		wake_ints |= _BIT(data->irq);
+		wake_ints |= _BIT(data->hwirq);
 	else
 		/* clear the irqs which don't wake */
-		wake_ints &= ~_BIT(data->irq);
+		wake_ints &= ~_BIT(data->hwirq);
 
 	/* Note: the clocks to corresponding blocks shouldn't be suspended
 	 * by individual drivers for this logic to work.
@@ -91,11 +92,36 @@ static const struct of_device_id intc_of_match[] __initconst = {
 	{},
 };
 
-void __init lpc31xx_init_irq(void)
+static int intc_irq_map(struct irq_domain *h, unsigned int virq, irq_hw_number_t hw)
 {
-	unsigned int irq;
+	/* Set the initial control values */
+	INTC_REQ_REG(hw) = INTC_REQ_WE_ENABLE;
+
+	/* Initialize as high-active, Disable the interrupt,
+	* Set target to IRQ , Set priority level to 1 (= lowest) for
+	* all the interrupt lines */
+	INTC_REQ_REG(hw) = INTC_REQ_WE_ACT_LOW |
+		INTC_REQ_WE_ENABLE |
+		INTC_REQ_TARGET_IRQ |
+		INTC_REQ_PRIO_LVL(1) |
+		INTC_REQ_WE_PRIO_LVL;
+
+	irq_set_chip_and_handler(virq, &lpc31xx_internal_chip,
+				 handle_level_irq);
+	set_irq_flags(virq, IRQF_VALID);
+
+	printk("intc hw=%ld virq=%d\n", hw, virq);
+	return 0;
+}
 
-	irq_domain_generate_simple(intc_of_match, 0x60000000, 0);
+static struct irq_domain_ops intc_ops = {
+	.map	= intc_irq_map,
+	.xlate	= irq_domain_xlate_onecell,
+};
+
+void __init lpc31xx_init_irq(void)
+{
+	struct device_node *node;
 
 	/* enable clock to interrupt controller */
 	cgu_clk_en_dis(CGU_SB_AHB2INTC_CLK_ID, 1);
@@ -111,30 +137,13 @@ void __init lpc31xx_init_irq(void)
 	INTC_IRQ_PRI_MASK = 0xFF;
 	INTC_FIQ_PRI_MASK = 0xFF;
 
-	/* Clear and disable all interrupts. Start from index 1 since 0 is unused.*/
-	for (irq = 1; irq < NR_IRQ_CPU; irq++) {
-		/* Set the initial control values */
-		INTC_REQ_REG(irq) = INTC_REQ_WE_ENABLE;
-
-		/* Initialize as high-active, Disable the interrupt,
-		* Set target to IRQ , Set priority level to 1 (= lowest) for
-		* all the interrupt lines */
-		INTC_REQ_REG(irq) = INTC_REQ_WE_ACT_LOW |
-			INTC_REQ_WE_ENABLE |
-			INTC_REQ_TARGET_IRQ |
-			INTC_REQ_PRIO_LVL(1) |
-			INTC_REQ_WE_PRIO_LVL;
-
-		irq_set_chip_and_handler(irq, &lpc31xx_internal_chip,
-					 handle_level_irq);
-		set_irq_flags(irq, IRQF_VALID);
-	}
+	node = of_find_matching_node_by_address(NULL, intc_of_match, INTC_PHYS);
+	intc_domain = irq_domain_add_linear(node, NR_IRQ_CPU, &intc_ops, NULL);
 
 	/* Set the priority threshold to 0, i.e. don't mask any interrupt */
 	/* on the basis of priority level, for both targets (IRQ/FIQ)    */
 	INTC_IRQ_PRI_MASK = 0;
 	INTC_FIQ_PRI_MASK = 0;
-
 }
 
 
diff --git a/arch/arm/mach-lpc31xx/time.c b/arch/arm/mach-lpc31xx/time.c
index 7fc7ecc..559ee67 100644
--- a/arch/arm/mach-lpc31xx/time.c
+++ b/arch/arm/mach-lpc31xx/time.c
@@ -3,7 +3,7 @@
  *  Author:	Durgesh Pattamatta
  *  Copyright (C) 2009 NXP semiconductors
  *
- *  Timer driver for LPC31xx
+ *  Timer driver for LPC31xx & LPC315x.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -25,21 +25,43 @@
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/time.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
 
-#include <mach/hardware.h>
 #include <asm/io.h>
 #include <asm/irq.h>
 #include <asm/leds.h>
-
 #include <asm/mach/time.h>
+
+#include <mach/hardware.h>
 #include <mach/gpio.h>
 #include <mach/board.h>
-//#include <mach/cgu.h>
 
+/***********************************************************************
+ * Timer register definitions
+ **********************************************************************/
+#define TIMER_LOAD      0x00
+#define TIMER_VALUE     0x04
+#define TIMER_CONTROL   0x08
+#define TIMER_CLEAR     0x0c
+
+#define TM_CTRL_ENABLE    _BIT(7)
+#define TM_CTRL_MODE      _BIT(6)
+#define TM_CTRL_PERIODIC  _BIT(6)
+#define TM_CTRL_PS1       _SBF(2, 0)
+#define TM_CTRL_PS16      _SBF(2, 1)
+#define TM_CTRL_PS256     _SBF(2, 2)
+#define TM_CTRL_PS_MASK   _SBF(2, 0x3)
+
+static void __iomem *timer_regs;
+#define timer_read(reg) \
+	__raw_readl(timer_regs + reg)
+#define timer_write(reg, value) \
+	__raw_writel(value, timer_regs + reg);
 
 static irqreturn_t lpc31xx_timer_interrupt(int irq, void *dev_id)
 {
-	TIMER_CLEAR(TIMER0_PHYS) = 0;
+	timer_write(TIMER_CLEAR, 0);
 	timer_tick();
 	return IRQ_HANDLED;
 }
@@ -50,43 +72,75 @@ static struct irqaction lpc31xx_timer_irq = {
 	.handler	= lpc31xx_timer_interrupt,
 };
 
-static void __init lpc31xx_timer_init (void)
-{
-	/* Switch on needed Timer clocks & switch off others*/
-	cgu_clk_en_dis(CGU_SB_TIMER0_PCLK_ID, 1);
-	cgu_clk_en_dis(CGU_SB_TIMER1_PCLK_ID, 0);
-	cgu_clk_en_dis(CGU_SB_TIMER2_PCLK_ID, 0);
-	cgu_clk_en_dis(CGU_SB_TIMER3_PCLK_ID, 0);
-
-	/* Stop/disable all timers */
-	TIMER_CONTROL(TIMER0_PHYS) = 0;
-
-	TIMER_LOAD(TIMER0_PHYS) = LATCH;
-	TIMER_CONTROL(TIMER0_PHYS) = (TM_CTRL_ENABLE | TM_CTRL_PERIODIC);
-	TIMER_CLEAR(TIMER0_PHYS) = 0;
-	setup_irq (IRQ_TIMER0, &lpc31xx_timer_irq);
-}
-
 /*!
  * Returns number of us since last clock interrupt.  Note that interrupts
  * will have been disabled by do_gettimeoffset()
  */
 static unsigned long lpc31xx_gettimeoffset(void)
 {
-	u32 elapsed = LATCH - TIMER_VALUE(TIMER0_PHYS);
+	u32 elapsed = LATCH - timer_read(TIMER_VALUE);
 	return ((elapsed * 100) / (XTAL_CLOCK / 20000));
 }
 
 static void lpc31xx_timer_suspend(void)
 {
-	TIMER_CONTROL(TIMER0_PHYS) &= ~TM_CTRL_ENABLE;	/* disable timers */
+	timer_write(TIMER_CONTROL, timer_read(TIMER_CONTROL) & ~TM_CTRL_ENABLE); /* disable timers */
 }
 
 static void lpc31xx_timer_resume(void)
 {
-	TIMER_CONTROL(TIMER0_PHYS) |= TM_CTRL_ENABLE;	/* enable timers */
+	timer_write(TIMER_CONTROL, timer_read(TIMER_CONTROL) | TM_CTRL_ENABLE);	/* enable timers */
 }
 
+static struct of_device_id timer_ids[] = {
+	{ .compatible = "nxp,lpc31xx-timer" },
+	{ /* sentinel */ }
+};
+
+static void __init lpc31xx_timer_init(void)
+{
+	struct device_node *node;
+	int ret;
+
+	node = of_find_matching_node(NULL, timer_ids);
+	if (!node)
+		goto err;
+
+	timer_regs = of_iomap(node, 0);
+	if (!timer_regs)
+		goto node_err;
+
+	/* Get the interrupts property */
+	ret = irq_of_parse_and_map(node, 0);
+	if (!ret) {
+		pr_crit("LPC31xx: Timer -  unable to get IRQ from DT\n");
+		goto ioremap_err;
+	}
+	of_node_put(node);
+
+	/* Switch on needed Timer clocks & switch off others*/
+	cgu_clk_en_dis(CGU_SB_TIMER0_PCLK_ID, 1);
+	cgu_clk_en_dis(CGU_SB_TIMER1_PCLK_ID, 0);
+	cgu_clk_en_dis(CGU_SB_TIMER2_PCLK_ID, 0);
+	cgu_clk_en_dis(CGU_SB_TIMER3_PCLK_ID, 0);
+
+	/* Stop/disable all timers */
+	timer_write(TIMER_CONTROL, 0);
+
+	timer_write(TIMER_LOAD, LATCH);
+	timer_write(TIMER_CONTROL, (TM_CTRL_ENABLE | TM_CTRL_PERIODIC));
+	timer_write(TIMER_CLEAR, 0);
+	setup_irq (IRQ_TIMER0, &lpc31xx_timer_irq);
+
+	return;
+
+ioremap_err:
+	iounmap(timer_regs);
+node_err:
+	of_node_put(node);
+err:
+	return;
+}
 
 struct sys_timer lpc31xx_timer = {
 	.init = lpc31xx_timer_init,
@@ -94,3 +148,4 @@ struct sys_timer lpc31xx_timer = {
 	.suspend = lpc31xx_timer_suspend,
 	.resume = lpc31xx_timer_resume,
 };
+
