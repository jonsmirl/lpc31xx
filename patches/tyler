Bottom: 8b41e8f65ba5af14bbede3b0277127bcec8c0c2c
Top:    07bc5862ed6c2545c842cffec9d51bf25b79fb40
Author: Jon Smirl <jonsmirl@gmail.com>
Date:   2014-08-05 14:17:17 -0400

TAS5716 support for Tyler


---

diff --git a/arch/arm/boot/dts/sun7i-a20-cubietruck.dts b/arch/arm/boot/dts/sun7i-a20-cubietruck.dts
index bb2f515..3cb91f2 100644
--- a/arch/arm/boot/dts/sun7i-a20-cubietruck.dts
+++ b/arch/arm/boot/dts/sun7i-a20-cubietruck.dts
@@ -125,6 +125,16 @@
 			status = "okay";
 		};
 
+		iis0: iis@01c22400 {
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2s0_pins_a>;
+			status = "okay";
+		};
+
+		codec: codec@01c22c00 {
+			status = "okay";
+		};
+
 		uart0: serial@01c28000 {
 			pinctrl-names = "default";
 			pinctrl-0 = <&uart0_pins_a>;
@@ -151,6 +161,27 @@
 			pinctrl-names = "default";
 			pinctrl-0 = <&i2c1_pins_a>;
 			status = "okay";
+
+			tas5716: tas5716@36 {
+				compatible = "ti,tas5716";
+				reg = <0x36>;
+				#sound-dai-cells = <0>;
+
+				power-down = <&pio 6 1 0>;
+				reset = <&pio 6 3 0>;
+				mute = <&pio 6 5 0>;
+				/*ti,hpsel = <&pio 0 0 0>;*/
+			};
+
+			sgtl5000: sgtl5000@a {
+				compatible = "fsl,sgtl5000";
+				reg = <0x0a>;
+				pwms = <&pwm 0 40 0>;
+
+				#sound-dai-cells = <0>;
+				VDDA-supply = <&reg_vcc3v3>;
+				VDDIO-supply = <&reg_vcc3v3>;
+			};
 		};
 
 		i2c2: i2c@01c2b400 {
@@ -172,6 +203,21 @@
 		};
 	};
 
+	sound {
+		compatible = "simple-audio-card";
+		simple-audio-card,format = "i2s";
+
+		simple-audio-card,cpu {
+			sound-dai = <&iis0>;
+		};
+
+		simple-audio-card,codec {
+			clock = <&iis0>;
+			sound-dai = <&sgtl5000>;
+		};
+	};
+
+
 	leds {
 		compatible = "gpio-leds";
 		pinctrl-names = "default";
diff --git a/arch/arm/boot/dts/sun7i-a20.dtsi b/arch/arm/boot/dts/sun7i-a20.dtsi
index 6deea0d..d9967052 100644
--- a/arch/arm/boot/dts/sun7i-a20.dtsi
+++ b/arch/arm/boot/dts/sun7i-a20.dtsi
@@ -724,6 +724,13 @@
 				allwinner,pull = <0>;
 			};
 
+			i2s0_pins_a: i2s0@0 {
+				allwinner,pins = "PB5", "PB6","PB7", "PB8","PB9", "PB10","PB11", "PB12";
+				allwinner,function = "i2s0";
+				allwinner,drive = <0>;
+				allwinner,pull = <0>;
+			};
+
 			emac_pins_a: emac0@0 {
 				allwinner,pins = "PA0", "PA1", "PA2",
 						"PA3", "PA4", "PA5", "PA6",
@@ -853,6 +860,7 @@
 			reg = <0x01c20e00 0xc>;
 			clocks = <&osc24M>;
 			#pwm-cells = <3>;
+			clock-output-names = "pwm0", "pwm1";
 			status = "disabled";
 		};
 
@@ -874,6 +882,48 @@
 			status = "disabled";
 		};
 
+		iis0: iis@01c22400 {
+			#clock-cells = <0>;
+			#sound-dai-cells = <0>;
+			compatible = "allwinner,sun7i-a20-iis";
+			reg = <0x01C22400 0x40>;
+			interrupts = <0 16 4>;
+			clocks = <&apb0_gates 3>, <&iis0_clk>;
+			clock-names = "apb", "iis";
+			clock-output-names = "mclk0";
+			dmas = <&dma 0 3>, <&dma 0 3>;
+			dma-names = "rx", "tx";
+			status = "disabled";
+		};
+
+		iis1: iis@01c22000 {
+			#clock-cells = <0>;
+			#sound-dai-cells = <0>;
+			compatible = "allwinner,sun7i-a20-iis";
+			reg = <0x01C22000 0x40>;
+			interrupts = <0 87 4>;
+			clocks = <&apb0_gates 4>, <&iis1_clk>;
+			clock-names = "apb", "iis";
+			clock-output-names = "mclk1";
+			dmas = <&dma 0 4>, <&dma 0 4>;
+			dma-names = "rx", "tx";
+			status = "disabled";
+		};
+
+		iis2: iis@01c24400 {
+			#clock-cells = <0>;
+			#sound-dai-cells = <0>;
+			compatible = "allwinner,sun7i-a20-iis";
+			reg = <0x01C24400 0x40>;
+			interrupts = <0 90 4>;
+			clocks = <&apb0_gates 8>, <&iis2_clk>;
+			clock-names = "apb", "iis";
+			clock-output-names = "mclk2";
+			dmas = <&dma 0 6>, <&dma 0 6>;
+			dma-names = "rx", "tx";
+			status = "disabled";
+		};
+
 		codec: codec@01c22c00 {
 			#sound-dai-cells = <0>;
 			compatible = "allwinner,sun7i-a20-codec";
diff --git a/sound/soc/generic/simple-card.c b/sound/soc/generic/simple-card.c
index 159e517f..c123fa7 100644
--- a/sound/soc/generic/simple-card.c
+++ b/sound/soc/generic/simple-card.c
@@ -8,6 +8,9 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+
+#define DEBUG
+
 #include <linux/clk.h>
 #include <linux/device.h>
 #include <linux/module.h>
@@ -33,6 +36,7 @@ static int asoc_simple_card_hw_params(struct snd_pcm_substream *substream,
 {
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
 	struct simple_card_data *priv = snd_soc_card_get_drvdata(rtd->card);
 	unsigned int mclk;
 	int ret = 0;
@@ -41,6 +45,10 @@ static int asoc_simple_card_hw_params(struct snd_pcm_substream *substream,
 		mclk = params_rate(params) * priv->mclk_fs;
 		ret = snd_soc_dai_set_sysclk(codec_dai, 0, mclk,
 					     SND_SOC_CLOCK_IN);
+		if (ret)
+			return ret;
+		ret = snd_soc_dai_set_sysclk(cpu_dai, 0, mclk,
+					     SND_SOC_CLOCK_IN);
 	}
 
 	return ret;
@@ -154,10 +162,6 @@ asoc_simple_card_sub_parse_of(struct device_node *np,
 		dai->sysclk = clk_get_rate(clk);
 	} else if (!of_property_read_u32(np, "system-clock-frequency", &val)) {
 		dai->sysclk = val;
-	} else {
-		clk = of_clk_get(node, 0);
-		if (!IS_ERR(clk))
-			dai->sysclk = clk_get_rate(clk);
 	}
 
 	return 0;
diff --git a/sound/soc/sunxi/Kconfig b/sound/soc/sunxi/Kconfig
index 79511ae..777d0e0 100644
--- a/sound/soc/sunxi/Kconfig
+++ b/sound/soc/sunxi/Kconfig
@@ -7,4 +7,10 @@ config SND_SUNXI_SOC_CODEC
 	select REGMAP_MMIO
 	default y
 
+config SND_SUNXI_SOC_I2S
+	tristate "sun4i/sun5i/sun7i I2S"
+	select SND_SOC_GENERIC_DMAENGINE_PCM
+	select REGMAP_MMIO
+	default y
+
 endmenu
diff --git a/sound/soc/sunxi/Makefile b/sound/soc/sunxi/Makefile
index b8950d3..d87b4c1 100644
--- a/sound/soc/sunxi/Makefile
+++ b/sound/soc/sunxi/Makefile
@@ -1,2 +1,3 @@
 obj-$(CONFIG_SND_SUNXI_SOC_CODEC) += sunxi-codec.o
+obj-$(CONFIG_SND_SUNXI_SOC_I2S) += sunxi-i2s.o
 
diff --git a/sound/soc/sunxi/sunxi-i2s.c b/sound/soc/sunxi/sunxi-i2s.c
new file mode 100644
index 0000000..27505b8
--- /dev/null
+++ b/sound/soc/sunxi/sunxi-i2s.c
@@ -0,0 +1,715 @@
+/*
+ * Copyright 2014 Emilio LÃ³pez <emilio@elopez.com.ar>
+ * Copyright 2014 Jon Smirl <jonsmirl@gmail.com>
+ *
+ * Based on the Allwinner SDK driver, released under the GPL.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/of_address.h>
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/regmap.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/initval.h>
+#include <sound/dmaengine_pcm.h>
+
+#include "sunxi-i2s.h"
+
+void sunxi_snd_txctrl_i2s(struct sunxi_priv *priv, struct snd_pcm_substream *substream, int on)
+{
+	u32 reg_val;
+
+	regmap_update_bits(priv->regmap, SUNXI_I2S_TXCHSEL, SUNXI_I2STXCHSEL_CHNUM_MASK, 
+				(substream->runtime->channels - 1) << SUNXI_I2STXCHSEL_CHNUM_SHIFT);
+
+	regmap_raw_read(priv->regmap, SUNXI_I2S_TXCHMAP, &reg_val, sizeof(reg_val));
+	reg_val = 0;
+	if (priv->revision == SUN4I) {
+		if(substream->runtime->channels == 1) {
+			reg_val = 0x76543200;
+		} else {
+			reg_val = 0x76543210;
+		}
+	} else {
+		if(substream->runtime->channels == 1) {
+			reg_val = 0x00000000;
+		} else {
+			reg_val = 0x00000010;
+		}
+	}
+	regmap_write(priv->regmap, SUNXI_I2S_TXCHMAP, reg_val);
+
+	regmap_read(priv->regmap, SUNXI_I2S_CTL, &reg_val);
+	if (priv->revision == SUN4I) {
+		reg_val &= ~SUNXI_I2SCTL_SDOEN_ALL;
+		switch(substream->runtime->channels) {
+			case 1:
+			case 2:
+				reg_val |= SUNXI_I2SCTL_SDO0EN;
+				break;
+			case 3:
+			case 4:
+				reg_val |= SUNXI_I2SCTL_SDO0EN;
+				reg_val |= SUNXI_I2SCTL_SDO1EN;
+				break;
+			case 5:
+			case 6:
+				reg_val |= SUNXI_I2SCTL_SDO0EN;
+				reg_val |= SUNXI_I2SCTL_SDO1EN;
+				reg_val |= SUNXI_I2SCTL_SDO2EN;
+				break;
+			case 7:
+			case 8:
+				reg_val |= SUNXI_I2SCTL_SDO0EN;
+				reg_val |= SUNXI_I2SCTL_SDO1EN;
+				reg_val |= SUNXI_I2SCTL_SDO2EN;
+				reg_val |= SUNXI_I2SCTL_SDO3EN;
+				break;
+			default:
+				reg_val |= SUNXI_I2SCTL_SDO0EN;
+		}
+	} else {
+		reg_val |= SUNXI_I2SCTL_SDO0EN;
+	}
+	regmap_write(priv->regmap, SUNXI_I2S_CTL, reg_val);
+
+	regmap_read(priv->regmap, SUNXI_I2S_TXCNT, &reg_val);
+	printk("JDS - SUNXI_I2S_TXCNT %d\n", reg_val);
+
+	//flush TX FIFO
+	regmap_update_bits(priv->regmap, SUNXI_I2S_FCTL, SUNXI_I2SFCTL_FTX_MASK, SUNXI_I2SFCTL_FTX);
+
+	//clear TX counter
+	regmap_write(priv->regmap, SUNXI_I2S_TXCNT, 0);
+
+	if (on) {
+		/* IIS TX ENABLE */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_TXEN_MASK, SUNXI_I2SCTL_TXEN);
+
+		/* enable DMA DRQ mode for play */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_INT, SUNXI_I2SINT_TXDRQEN_MASK, SUNXI_I2SINT_TXDRQEN);
+
+	} else {
+		/* IIS TX DISABLE */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_TXEN_MASK, 0);
+
+		/* DISBALE dma DRQ mode */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_INT, SUNXI_I2SINT_TXDRQEN_MASK, 0);
+	}
+
+	{
+	int i;
+	for (i = SUNXI_I2S_CTL; i <= SUNXI_I2S_RXCHMAP; i += 4)  {
+		regmap_read(priv->regmap, i, &reg_val);
+		printk("REG %02x VAL %08x\n", i, reg_val);
+	}
+	}
+
+}
+
+void sunxi_snd_rxctrl_i2s(struct sunxi_priv *priv, int on)
+{
+	//flush RX FIFO
+	regmap_update_bits(priv->regmap, SUNXI_I2S_FCTL, SUNXI_I2SFCTL_FRX_MASK, SUNXI_I2SFCTL_FRX);
+
+	//clear RX counter
+	regmap_write(priv->regmap, SUNXI_I2S_RXCNT, 0);
+
+	if (on) {
+		/* IIS RX ENABLE */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_RXEN_MASK, SUNXI_I2SCTL_RXEN);
+
+		/* enable DMA DRQ mode for record */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_INT, SUNXI_I2SINT_RXDRQEN_MASK, SUNXI_I2SINT_RXDRQEN);
+
+	} else {
+		/* IIS RX DISABLE */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_RXEN_MASK, 0);
+
+		/* DISBALE dma DRQ mode */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_INT, SUNXI_I2SINT_RXDRQEN_MASK, 0);
+	}
+}
+
+static int sunxi_i2s_set_fmt(struct snd_soc_dai *cpu_dai, unsigned int fmt)
+{
+	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
+	u32 reg_val;
+	int ret;
+
+	printk("JDS - sunxi_i2s_set_fmt %08x\n", fmt);
+
+	//SDO ON
+	if (priv->revision == SUN4I) {
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_SDOEN_ALL, SUNXI_I2SCTL_SDOEN_ALL);
+	} else {
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_SDO0EN_MASK, SUNXI_I2SCTL_SDO0EN);
+	}
+
+
+	/* master or slave selection */
+	switch(fmt & SND_SOC_DAIFMT_MASTER_MASK){
+	case SND_SOC_DAIFMT_CBM_CFM:   /* codec clk & frm master */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_MS_MASK, SUNXI_I2SCTL_SLAVE);
+		printk("JDS - sunxi_i2s_set_fmt slave\n");
+		priv->master = 0;
+		break;
+	case SND_SOC_DAIFMT_CBS_CFS:   /* codec clk & frm slave */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_MS_MASK, 0);
+		printk("JDS - sunxi_i2s_set_fmt master\n");
+		priv->master = 1;
+		/* Enable iis on a basic rate */
+		ret = clk_set_rate(priv->clk_iis, 24576000);
+		if (ret) {
+			dev_err(priv->dev, "failed to set i2s base clock rate\n");
+			return ret;
+		}
+		if (clk_prepare_enable(priv->clk_iis)) {
+			dev_err(priv->dev, "failed to enable iis clock\n");
+			return -EINVAL;
+		}
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	/* pcm or i2s mode selection */
+	switch(fmt & SND_SOC_DAIFMT_FORMAT_MASK){
+	case SND_SOC_DAIFMT_I2S:        /* I2S mode */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_PCM_MASK, 0);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_FMT_MASK, SUNXI_I2SFAT0_FMT_I2S);
+		break;
+	case SND_SOC_DAIFMT_RIGHT_J:    /* Right Justified mode */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_PCM_MASK, 0);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_FMT_MASK, SUNXI_I2SFAT0_FMT_RGT);
+		break;
+	case SND_SOC_DAIFMT_LEFT_J:     /* Left Justified mode */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_PCM_MASK, 0);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_FMT_MASK, SUNXI_I2SFAT0_FMT_LFT);
+		break;
+	case SND_SOC_DAIFMT_DSP_A:      /* L data msb after FRM LRC */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_PCM_MASK, SUNXI_I2SCTL_PCM);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_LRCP_MASK, 0);
+		break;
+	case SND_SOC_DAIFMT_DSP_B:      /* L data msb during FRM LRC */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_PCM_MASK, SUNXI_I2SCTL_PCM);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_LRCP_MASK, SUNXI_I2SFAT0_LRCP);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	/* DAI signal inversions */
+	switch(fmt & SND_SOC_DAIFMT_INV_MASK){
+	case SND_SOC_DAIFMT_NB_NF:     /* normal bit clock + frame */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_LRCP_MASK, 0);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_BCP_MASK, 0);
+		break;
+	case SND_SOC_DAIFMT_NB_IF:     /* normal bclk + inv frm */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_LRCP_MASK, SUNXI_I2SFAT0_LRCP);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_BCP_MASK, 0);
+		break;
+	case SND_SOC_DAIFMT_IB_NF:     /* invert bclk + nor frm */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_LRCP_MASK, 0);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_BCP_MASK, SUNXI_I2SFAT0_BCP);
+		break;
+	case SND_SOC_DAIFMT_IB_IF:     /* invert bclk + frm */
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_LRCP_MASK, SUNXI_I2SFAT0_LRCP);
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_BCP_MASK, SUNXI_I2SFAT0_BCP);
+		break;
+	}
+
+	/* word select size */
+	if(priv->ws_size == 16)
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_WSS_MASK, SUNXI_I2SFAT0_WSS_16BCLK);
+	else if(priv->ws_size == 20)
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_WSS_MASK, SUNXI_I2SFAT0_WSS_20BCLK);
+	else if(priv->ws_size == 24)
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_WSS_MASK, SUNXI_I2SFAT0_WSS_24BCLK);
+	else
+		regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_WSS_MASK, SUNXI_I2SFAT0_WSS_32BCLK);
+
+	/* PCM REGISTER setup */
+	reg_val = priv->pcm_txtype & SUNXI_I2SFAT1_TXPDM_MASK;
+	reg_val |= priv->pcm_rxtype << SUNXI_I2SFAT1_RXPDM_SHIFT;
+
+	if(!priv->pcm_sync_type)
+		reg_val |= SUNXI_I2SFAT1_SSYNC;				// short sync
+	if(priv->pcm_sw == 16)
+		reg_val |= SUNXI_I2SFAT1_SW;
+
+	reg_val |= ((priv->pcm_start_slot - 1) << SUNXI_I2SFAT1_SI_SHIFT) & SUNXI_I2SFAT1_SI_MASK; // start slot index
+
+	reg_val |= priv->pcm_lsb_first << SUNXI_I2SFAT1_MLS_SHIFT;	// MSB or LSB first
+
+	if(priv->pcm_sync_period == 256)
+		reg_val |= SUNXI_I2SFAT1_SYNCLEN_256BCLK;
+	else if (priv->pcm_sync_period == 128)
+		reg_val |= SUNXI_I2SFAT1_SYNCLEN_128BCLK;
+	else if (priv->pcm_sync_period == 64)
+		reg_val |= SUNXI_I2SFAT1_SYNCLEN_64BCLK;
+	else if (priv->pcm_sync_period == 32)
+		reg_val |= SUNXI_I2SFAT1_SYNCLEN_32BCLK;
+	regmap_write(priv->regmap, SUNXI_I2S_FAT1, reg_val);
+
+	/* set FIFO control register */
+	reg_val = SUNXI_I2SFCTL_RXOM_MOD0;
+	reg_val |= SUNXI_I2SFCTL_TXIM_MOD1;
+	reg_val |= SUNXI_I2SFCTL_RXTL(0xf);				//RX FIFO trigger level
+	reg_val |= SUNXI_I2SFCTL_TXTL(0x40);				//TX FIFO empty trigger level
+	regmap_write(priv->regmap, SUNXI_I2S_FCTL, reg_val);
+	return 0;
+}
+
+
+static int sunxi_i2s_hw_params(struct snd_pcm_substream *substream, 
+		struct snd_pcm_hw_params *params, struct snd_soc_dai *cpu_dai)
+{
+	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
+	unsigned int ret = 0, fmt, div;
+	unsigned long rate = params_rate(params);
+
+	/* set i2s data format */
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		fmt = SUNXI_I2SFAT0_SR_16BIT;
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			priv->playback_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_2_BYTES;
+		break;
+	case SNDRV_PCM_FORMAT_S20_3LE:
+		fmt = SUNXI_I2SFAT0_SR_20BIT;
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			priv->playback_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		fmt = SUNXI_I2SFAT0_SR_24BIT;
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			priv->playback_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
+		break;
+	default:
+		return -EINVAL;
+	}
+	regmap_update_bits(priv->regmap, SUNXI_I2S_FAT0, SUNXI_I2SFAT0_SR_MASK, fmt);
+
+	div  = SUNXI_I2SCLKD_MCLKDIV_1;
+	regmap_update_bits(priv->regmap, SUNXI_I2S_CLKD, SUNXI_I2SCLKD_MCLKDIV_MASK, div);
+
+	printk("JDS - sunxi_i2s_hw_params sysclk %d rate %ld\n", priv->sysclk, rate);
+
+	if (priv->master) {
+		/* asssumes 32b i2s format */
+		switch (DIV_ROUND_UP(priv->sysclk, rate)) {
+		case 256:
+			div  = SUNXI_I2SCLKD_BCLKDIV_8;
+			break;
+		case 384:
+			div  = SUNXI_I2SCLKD_BCLKDIV_12;
+			break;
+		case 512:
+			div  = SUNXI_I2SCLKD_BCLKDIV_8;
+			break;
+		default:
+			return -EINVAL;
+		}
+		regmap_update_bits(priv->regmap, SUNXI_I2S_CLKD, SUNXI_I2SCLKD_BCLKDIV_MASK, div);
+	}
+
+	return ret;
+}
+
+static int sunxi_i2s_trigger(struct snd_pcm_substream *substream,
+                              int cmd, struct snd_soc_dai *cpu_dai)
+{
+	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
+	int ret = 0;
+
+	printk("JDS - sunxi_i2s_trigger %d\n", cmd);
+	switch (cmd) {
+		case SNDRV_PCM_TRIGGER_START:
+		case SNDRV_PCM_TRIGGER_RESUME:
+		case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+			if (substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+				sunxi_snd_rxctrl_i2s(priv, 1);
+			} else {
+				sunxi_snd_txctrl_i2s(priv, substream, 1);
+			}
+			break;
+		case SNDRV_PCM_TRIGGER_STOP:
+		case SNDRV_PCM_TRIGGER_SUSPEND:
+		case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+			if (substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+				sunxi_snd_rxctrl_i2s(priv, 0);
+			} else {
+				sunxi_snd_txctrl_i2s(priv, substream, 0);
+			}
+			break;
+		default:
+			ret = -EINVAL;
+			break;
+	}
+
+	return ret;
+}
+
+static int sunxi_i2s_set_sysclk(struct snd_soc_dai *cpu_dai, int clk_id, unsigned int freq, int dir)
+{
+	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
+
+	if ((freq == 24576000) || (freq == 22579200)) {
+		clk_set_rate(priv->clk_iis, freq);
+	}
+	priv->sysclk = freq;
+	return 0;
+}
+
+static int sunxi_i2s_dai_probe(struct snd_soc_dai *cpu_dai)
+{
+	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
+
+	snd_soc_dai_init_dma_data(cpu_dai, &priv->playback_dma_data, &priv->capture_dma_data);
+
+	return 0;
+}
+
+static int sunxi_i2s_dai_remove(struct snd_soc_dai *cpu_dai)
+{
+	return 0;
+}
+
+
+static int sunxi_i2s_mclk_prepare(struct clk_hw *hw)
+{
+	struct sunxi_priv *priv = container_of(hw, struct sunxi_priv, mclk_div.hw);
+	int ret;
+
+//	ret = regmap_update_bits(priv->regmap, SUNXI_I2S_CLKD, SUNXI_I2SCLKD_MCLKDIV_MASK, SUNXI_I2SCLKD_MCLKDIV_1);
+	ret = regmap_update_bits(priv->regmap, SUNXI_I2S_CLKD, SUNXI_I2SCLKD_MCLKOEN_MASK, SUNXI_I2SCLKD_MCLKOEN);
+	printk("JDS - sunxi_i2s_mclk_prepare done\n");
+	return 0;
+}
+
+static struct clk_ops sunxi_i2s_clk_divider_ops = {
+};
+
+static int sunxi_i2s_mclk_init(struct platform_device *pdev, struct sunxi_priv *priv, void __iomem *base)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct clk_init_data init;
+	const char *clk_name = NULL;
+	const char *clk_parent = __clk_get_name(priv->clk_iis);
+	int ret;
+	int flags = 0;
+
+	of_property_read_string(np, "clock-output-names", &clk_name);
+
+	sunxi_i2s_clk_divider_ops = clk_divider_ops;
+	sunxi_i2s_clk_divider_ops.prepare = sunxi_i2s_mclk_prepare;
+
+	init.name = clk_name;
+	init.ops = &sunxi_i2s_clk_divider_ops;
+	init.flags = flags | CLK_IS_BASIC;
+	init.parent_names = &clk_parent;
+	init.num_parents = 1;
+
+	/* struct clk_divider assignments */
+	priv->mclk_div.reg = base + SUNXI_I2S_CLKD;
+	priv->mclk_div.shift = SUNXI_I2SCLKD_MCLKDIV_SHIFT;
+	priv->mclk_div.width = SUNXI_I2SCLKD_MCLKDIV_WIDTH;
+	priv->mclk_div.flags = 0;
+	priv->mclk_div.lock = NULL;
+	priv->mclk_div.hw.init = &init;
+	priv->mclk_div.table = NULL;
+
+	/* register the clock */
+	priv->clk_mclk = clk_register(&pdev->dev, &priv->mclk_div.hw);
+
+	if (IS_ERR(priv->clk_mclk)) {
+		dev_err(&pdev->dev, "failed to register mclk: %ld\n", PTR_ERR(priv->clk_mclk));
+		return PTR_ERR(priv->clk_mclk);
+	}
+
+	ret = of_clk_add_provider(np, of_clk_src_simple_get, priv->clk_mclk);
+	if (ret)
+		return ret;
+
+	printk("JDS - sunxi_i2s_mclk_init %p\n", priv->clk_mclk);
+
+	return 0;
+}
+
+static void iisregsave(void)
+{
+	/*regsave[0] = readl(priv->regs + SUNXI_I2S_CTL);
+	regsave[1] = readl(priv->regs + SUNXI_I2S_FAT0);
+	regsave[2] = readl(priv->regs + SUNXI_I2S_FAT1);
+	regsave[3] = readl(priv->regs + SUNXI_I2S_FCTL) | (0x3<<24);
+	regsave[4] = readl(priv->regs + SUNXI_I2S_INT);
+	regsave[5] = readl(priv->regs + SUNXI_I2S_CLKD);
+	regsave[6] = readl(priv->regs + SUNXI_TXCHSEL);
+	regsave[7] = readl(priv->regs + SUNXI_TXCHMAP);*/
+}
+
+static void iisregrestore(void)
+{
+	/*writel(regsave[0], priv->regs + SUNXI_I2S_CTL);
+	writel(regsave[1], priv->regs + SUNXI_I2S_FAT0);
+	writel(regsave[2], priv->regs + SUNXI_I2S_FAT1);
+	writel(regsave[3], priv->regs + SUNXI_I2S_FCTL);
+	writel(regsave[4], priv->regs + SUNXI_I2S_INT);
+	writel(regsave[5], priv->regs + SUNXI_I2S_CLKD);
+	writel(regsave[6], priv->regs + SUNXI_TXCHSEL);
+	writel(regsave[7], priv->regs + SUNXI_TXCHMAP);*/
+}
+
+static int sunxi_i2s_suspend(struct snd_soc_dai *cpu_dai)
+{
+	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
+
+	printk("[IIS]Entered %s\n", __func__);
+
+	//Global Enable Digital Audio Interface
+	regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_GEN_MASK, 0);
+
+	iisregsave();
+
+	//release the module clock
+	clk_disable(priv->clk_iis);
+
+	clk_disable(priv->clk_apb);
+
+	//printk("[IIS]PLL2 0x01c20008 = %#x\n", *(volatile int*)0xF1C20008);
+	printk("[IIS]SPECIAL CLK 0x01c20068 = %#x, line= %d\n", *(volatile int*)0xF1C20068, __LINE__);
+	printk("[IIS]SPECIAL CLK 0x01c200B8 = %#x, line = %d\n", *(volatile int*)0xF1C200B8, __LINE__);
+
+	return 0;
+}
+static int sunxi_i2s_resume(struct snd_soc_dai *cpu_dai)
+{
+	struct sunxi_priv *priv = snd_soc_dai_get_drvdata(cpu_dai);
+
+	printk("[IIS]Entered %s\n", __func__);
+
+	//release the module clock
+	clk_enable(priv->clk_apb);
+
+	//release the module clock
+	clk_enable(priv->clk_iis);
+
+	iisregrestore();
+
+	//Global Enable Digital Audio Interface
+	regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_GEN_MASK, SUNXI_I2SCTL_GEN);
+
+	//printk("[IIS]PLL2 0x01c20008 = %#x\n", *(volatile int*)0xF1C20008);
+	printk("[IIS]SPECIAL CLK 0x01c20068 = %#x, line= %d\n", *(volatile int*)0xF1C20068, __LINE__);
+	printk("[IIS]SPECIAL CLK 0x01c200B8 = %#x, line = %d\n", *(volatile int*)0xF1C200B8, __LINE__);
+
+	return 0;
+}
+
+#define SUNXI_I2S_RATES (SNDRV_PCM_RATE_8000_192000 | SNDRV_PCM_RATE_KNOT)
+static struct snd_soc_dai_ops sunxi_i2s_dai_ops = {
+	.trigger 	= sunxi_i2s_trigger,
+	.hw_params 	= sunxi_i2s_hw_params,
+	.set_fmt 	= sunxi_i2s_set_fmt,
+	.set_sysclk	= sunxi_i2s_set_sysclk,
+};
+
+static struct snd_soc_dai_driver sunxi_i2s_dai = {
+	.probe 		= sunxi_i2s_dai_probe,
+	.suspend 	= sunxi_i2s_suspend,
+	.resume 	= sunxi_i2s_resume,
+	.remove 	= sunxi_i2s_dai_remove,
+	.playback 	= {
+		.channels_min = 1,
+		.channels_max = 8,
+		.rates = SUNXI_I2S_RATES,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE | SNDRV_PCM_FMTBIT_S24_LE,
+	},
+	.capture 	= {
+		.channels_min = 1,
+		.channels_max = 2,
+		.rates = SUNXI_I2S_RATES,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE | SNDRV_PCM_FMTBIT_S24_LE,
+	},
+	.symmetric_rates = 1,
+	.ops 		= &sunxi_i2s_dai_ops,
+};
+
+static const struct snd_soc_component_driver sunxi_i2s_component = {
+	.name	= "sunxi-i2s",
+};
+
+static const struct regmap_range sunxi_i2s_volatile_regs_range[] = {
+	regmap_reg_range(SUNXI_I2S_TXFIFO, SUNXI_I2S_FCTL),
+	regmap_reg_range(SUNXI_I2S_ISTA, SUNXI_I2S_ISTA),
+	regmap_reg_range(SUNXI_I2S_TXCNT, SUNXI_I2S_RXCNT),
+};
+
+static const struct regmap_access_table sunxi_i2s_volatile_regs = {
+	.yes_ranges	= sunxi_i2s_volatile_regs_range,
+	.n_yes_ranges	= ARRAY_SIZE(sunxi_i2s_volatile_regs_range),
+};
+
+static const struct regmap_config sunxi_i2s_regmap_config = {
+	.reg_bits	= 32,
+	.reg_stride	= 4,
+	.val_bits	= 32,
+	.max_register 	= SUNXI_I2S_RXCHMAP,
+	.volatile_table	= &sunxi_i2s_volatile_regs,
+	.fast_io	= true,
+};
+
+static const struct of_device_id sunxi_i2s_of_match[] = {
+	{ .compatible = "allwinner,sun4i-a10-iis", .data = (void *)SUN4I},
+	{ .compatible = "allwinner,sun5i-a13-iis", .data = (void *)SUN5I},
+	{ .compatible = "allwinner,sun7i-a20-iis", .data = (void *)SUN7I},
+	{}
+};
+MODULE_DEVICE_TABLE(of, sunxi_i2s_of_match);
+
+static int sunxi_i2s_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	const struct of_device_id *of_id;
+	struct device *dev = &pdev->dev;
+	struct sunxi_priv *priv;
+	struct resource *res;
+	void __iomem *base;
+	int ret;
+
+	if (!of_device_is_available(np))
+		return -ENODEV;
+
+	printk("JDS: sunxi_i2s_probe pdev %p\n", pdev);
+	of_id = of_match_device(sunxi_i2s_of_match, dev);
+	if (!of_id)
+		return -EINVAL;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	priv->revision = (enum sunxi_soc_family)of_id->data;
+	priv->dev = &pdev->dev;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	base = devm_ioremap_resource(dev, res);
+	if (IS_ERR(base))
+		return PTR_ERR(base);
+
+	priv->regmap = devm_regmap_init_mmio(dev, base,
+					     &sunxi_i2s_regmap_config);
+	if (IS_ERR(priv->regmap))
+		return PTR_ERR(priv->regmap);
+
+	/* Get the clocks from the DT */
+	priv->clk_apb = devm_clk_get(dev, "apb");
+	if (IS_ERR(priv->clk_apb)) {
+		dev_err(dev, "failed to get apb clock\n");
+		return PTR_ERR(priv->clk_apb);
+	}
+	priv->clk_iis = devm_clk_get(dev, "iis");
+	if (IS_ERR(priv->clk_iis)) {
+		dev_err(dev, "failed to get iis clock\n");
+		return PTR_ERR(priv->clk_iis);
+	}
+#ifdef JDS
+	/* Enable iis on a basic rate */
+	ret = clk_set_rate(priv->clk_iis, 24576000);
+	if (ret) {
+		dev_err(dev, "failed to set i2s base clock rate\n");
+		return ret;
+	}
+	if (clk_prepare_enable(priv->clk_iis)) {
+		dev_err(dev, "failed to enable iis clock\n");
+		return -EINVAL;
+	}
+#endif
+	/* Enable the bus clock */
+	if (clk_prepare_enable(priv->clk_apb)) {
+		dev_err(dev, "failed to enable apb clock\n");
+		clk_disable_unprepare(priv->clk_iis);
+		return -EINVAL;
+	}
+
+	/* DMA configuration for TX FIFO */
+	priv->playback_dma_data.addr = res->start + SUNXI_I2S_TXFIFO;
+	priv->playback_dma_data.maxburst = 4;
+	priv->playback_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_2_BYTES;
+
+	/* DMA configuration for RX FIFO */
+	priv->capture_dma_data.addr = res->start + SUNXI_I2S_RXFIFO;
+	priv->capture_dma_data.maxburst = 4;
+	priv->capture_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_2_BYTES;
+
+	ret = sunxi_i2s_mclk_init(pdev, priv, base);
+	if (ret)
+		return ret;
+
+	dev_set_drvdata(&pdev->dev, priv);
+
+	ret = devm_snd_soc_register_component(dev, &sunxi_i2s_component, &sunxi_i2s_dai, 1);
+	if (ret)
+		return ret;
+
+	ret = devm_snd_dmaengine_pcm_register(dev, NULL, 0);
+	if (ret)
+		return ret;
+
+	/* master hardware enable */
+	ret = regmap_update_bits(priv->regmap, SUNXI_I2S_CTL, SUNXI_I2SCTL_GEN_MASK, SUNXI_I2SCTL_GEN);
+	if (ret)
+		return ret;
+
+	printk("JDS: sunxi_i2s_probe finished\n");
+	return 0;
+
+}
+
+static int sunxi_i2s_remove(struct platform_device *pdev)
+{
+	struct sunxi_priv *priv = platform_get_drvdata(pdev);
+
+	clk_disable_unprepare(priv->clk_apb);
+	clk_disable_unprepare(priv->clk_iis);
+
+	return 0;
+}
+
+static struct platform_driver sunxi_i2s_driver = {
+	.driver = {
+		.name = "sunxi-i2s",
+		.owner = THIS_MODULE,
+		.of_match_table = sunxi_i2s_of_match,
+	},
+	.probe = sunxi_i2s_probe,
+	.remove = sunxi_i2s_remove,
+};
+module_platform_driver(sunxi_i2s_driver);
+
+MODULE_DESCRIPTION("sunxi i2s ASoC driver");
+MODULE_AUTHOR("Jon Smirl <jonsmirl@gmail.com>");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/sunxi/sunxi-i2s.h b/sound/soc/sunxi/sunxi-i2s.h
new file mode 100644
index 0000000..ccd8906
--- /dev/null
+++ b/sound/soc/sunxi/sunxi-i2s.h
@@ -0,0 +1,414 @@
+/*
+ * sound\soc\sunxi\i2s\sunxi-i2s.h
+ * (C) Copyright 2007-2011
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ * chenpailin <chenpailin@allwinnertech.com>
+ *
+ * some simple description for this code
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ */
+
+#ifndef SUNXI_I2S_H_
+#define SUNXI_I2S_H_
+
+/*------------------------------------------------------------*/
+/* REGISTER definitions */
+
+#define SUNXI_I2S_CTL		0x00 /* Digital Audio Control Register */
+#define SUNXI_I2S_FAT0		0x04 /* Digital Audio Format Register 0 */
+#define SUNXI_I2S_FAT1		0x08 /* Digital Audio Format Register 1 */
+#define SUNXI_I2S_TXFIFO	0x0C /* Digital Audio TX FIFO Register */
+#define SUNXI_I2S_RXFIFO	0x10 /* Digital Audio RX FIFO Register */
+#define SUNXI_I2S_FCTL		0x14 /* Digital Audio FIFO Control Register */
+#define SUNXI_I2S_FSTA		0x18 /* Digital Audio FIFO Status Register */
+#define SUNXI_I2S_INT		0x1C /* Digital Audio Interrupt Control Register */
+#define SUNXI_I2S_ISTA		0x20 /* Digital Audio Interrupt Status Register */
+#define SUNXI_I2S_CLKD		0x24 /* Digital Audio Clock Divide Register */
+#define SUNXI_I2S_TXCNT		0x28 /* Digital Audio RX Sample Counter Register */
+#define SUNXI_I2S_RXCNT		0x2C /* Digital Audio TX Sample Counter Register */
+#define SUNXI_I2S_TXCHSEL	0x30 /* Digital Audio TX Channel Select register */
+#define SUNXI_I2S_TXCHMAP	0x34 /* Digital Audio TX Channel Mapping Register */
+#define SUNXI_I2S_RXCHSEL	0x38 /* Digital Audio RX Channel Select register */
+#define SUNXI_I2S_RXCHMAP	0x3C /* Digital Audio RX Channel Mapping Register */
+
+
+/* SUNXI_I2S_CTL	0x00 	 Digital Audio Control Register */
+#define SUNXI_I2SCTL_SDO3EN		(1<<11)
+#define SUNXI_I2SCTL_SDO3EN_MASK	(1<<11)
+#define SUNXI_I2SCTL_SDO3EN_SHIFT	11
+#define SUNXI_I2SCTL_SDO3EN_WIDTH	1
+#define SUNXI_I2SCTL_SDO2EN		(1<<10)
+#define SUNXI_I2SCTL_SDO2EN_MASK	(1<<10)
+#define SUNXI_I2SCTL_SDO2EN_SHIFT	10
+#define SUNXI_I2SCTL_SDO2EN_WIDTH	1
+#define SUNXI_I2SCTL_SDO1EN		(1<<9)
+#define SUNXI_I2SCTL_SDO1EN_MASK	(1<<9)
+#define SUNXI_I2SCTL_SDO1EN_SHIFT	9
+#define SUNXI_I2SCTL_SDO1EN_WIDTH	1
+#define SUNXI_I2SCTL_SDO0EN		(1<<8)
+#define SUNXI_I2SCTL_SDO0EN_MASK	(1<<8)
+#define SUNXI_I2SCTL_SDO0EN_SHIFT	8
+#define SUNXI_I2SCTL_SDO0EN_WIDTH	1
+#define SUNXI_I2SCTL_SDOEN_ALL (SUNXI_I2SCTL_SDO3EN | SUNXI_I2SCTL_SDO2EN | SUNXI_I2SCTL_SDO1EN| SUNXI_I2SCTL_SDO0EN)
+
+#define SUNXI_I2SCTL_ASS		(1<<6)
+#define SUNXI_I2SCTL_ASS_MASK		(1<<6)
+#define SUNXI_I2SCTL_ASS_SHIFT		6
+#define SUNXI_I2SCTL_ASS_WIDTH		1
+#define SUNXI_I2SCTL_SLAVE		(1<<5)
+#define SUNXI_I2SCTL_MS_MASK		(1<<5)
+#define SUNXI_I2SCTL_MS_SHIFT		5
+#define SUNXI_I2SCTL_MS_WIDTH		1
+#define SUNXI_I2SCTL_PCM		(1<<4)
+#define SUNXI_I2SCTL_PCM_MASK		(1<<4)
+#define SUNXI_I2SCTL_PCM_SHIFT		4
+#define SUNXI_I2SCTL_PCM_WIDTH		1
+#define SUNXI_I2SCTL_LOOP		(1<<3)
+#define SUNXI_I2SCTL_LOOP_MASK		(1<<3)
+#define SUNXI_I2SCTL_LOOP_SHIFT		3
+#define SUNXI_I2SCTL_LOOP_WIDTH		1
+#define SUNXI_I2SCTL_TXEN		(1<<2)
+#define SUNXI_I2SCTL_TXEN_MASK		(1<<2)
+#define SUNXI_I2SCTL_TXEN_SHIFT		2
+#define SUNXI_I2SCTL_TXEN_WIDTH		1
+#define SUNXI_I2SCTL_RXEN		(1<<1)
+#define SUNXI_I2SCTL_RXEN_MASK		(1<<1)
+#define SUNXI_I2SCTL_RXEN_SHIFT		1
+#define SUNXI_I2SCTL_RXEN_WIDTH		1
+#define SUNXI_I2SCTL_GEN		(1<<0)
+#define SUNXI_I2SCTL_GEN_MASK		(1<<0)
+#define SUNXI_I2SCTL_GEN_SHIFT		0
+#define SUNXI_I2SCTL_GEN_WIDTH		1
+
+/* SUNXI_I2S_FAT0	0x04 	 Digital Audio Format Register 0 */
+
+#define SUNXI_I2SFAT0_LRCP		(1<<7)
+#define SUNXI_I2SFAT0_LRCP_MASK		(1<<7)
+#define SUNXI_I2SFAT0_LRCP_SHIFT	7
+#define SUNXI_I2SFAT0_LRCP_WIDTH	1
+#define SUNXI_I2SFAT0_BCP		(1<<6)
+#define SUNXI_I2SFAT0_BCP_MASK		(1<<6)
+#define SUNXI_I2SFAT0_BCP_SHIFT		6
+#define SUNXI_I2SFAT0_BCP_WIDTH		1
+#define SUNXI_I2SFAT0_SR_MASK		(3<<4)
+#define SUNXI_I2SFAT0_SR_16BIT		(0<<4)
+#define	SUNXI_I2SFAT0_SR_20BIT		(1<<4)
+#define SUNXI_I2SFAT0_SR_24BIT		(2<<4)
+#define SUNXI_I2SFAT0_SR_SHIFT		4
+#define SUNXI_I2SFAT0_SR_WIDTH		2
+#define SUNXI_I2SFAT0_WSS_MASK		(3<<2)
+#define SUNXI_I2SFAT0_WSS_16BCLK	(0<<2)
+#define SUNXI_I2SFAT0_WSS_20BCLK	(1<<2)
+#define SUNXI_I2SFAT0_WSS_24BCLK	(2<<2)
+#define SUNXI_I2SFAT0_WSS_32BCLK	(3<<2)
+#define SUNXI_I2SFAT0_WSS_SHIFT		2
+#define SUNXI_I2SFAT0_WSS_WIDTH		2
+#define SUNXI_I2SFAT0_FMT_MASK		(3<<0)
+#define SUNXI_I2SFAT0_FMT_I2S		(0<<0)
+#define SUNXI_I2SFAT0_FMT_LFT		(1<<0)
+#define SUNXI_I2SFAT0_FMT_RGT		(2<<0)
+#define SUNXI_I2SFAT0_FMT_RVD		(3<<0)
+#define SUNXI_I2SFAT0_FMT_SHIFT		0
+#define SUNXI_I2SFAT0_FMT_WIDTH		2
+
+/* SUNXI_I2S_FAT1	0x08 	 Digital Audio Format Register 1 */
+
+#define SUNXI_I2SFAT1_SYNCLEN_MASK	(7<<12)
+#define SUNXI_I2SFAT1_SYNCLEN_16BCLK	(0<<12)
+#define SUNXI_I2SFAT1_SYNCLEN_32BCLK	(1<<12)
+#define SUNXI_I2SFAT1_SYNCLEN_64BCLK	(2<<12)
+#define SUNXI_I2SFAT1_SYNCLEN_128BCLK	(3<<12)
+#define SUNXI_I2SFAT1_SYNCLEN_256BCLK	(4<<12)
+#define SUNXI_I2SFAT1_SYNCLEN_SHIFT	12
+#define SUNXI_I2SFAT1_SYNCLEN_WIDTH	3
+#define SUNXI_I2SFAT1_SYNCOUTEN		(1<<11)
+#define SUNXI_I2SFAT1_SYNCOUTEN_MASK	(1<<11)
+#define SUNXI_I2SFAT1_SYNCOUTEN_SHIFT	11
+#define SUNXI_I2SFAT1_SYNCOUTEN_WIDTH	1
+#define SUNXI_I2SFAT1_OUTMUTE		(1<<10)
+#define SUNXI_I2SFAT1_OUTMUTE_MASK	(1<<10)
+#define SUNXI_I2SFAT1_OUTMUTE_SHIFT	10
+#define SUNXI_I2SFAT1_OUTMUTE_WIDTH	1
+#define SUNXI_I2SFAT1_MLS		(1<<9)
+#define SUNXI_I2SFAT1_MLS_MASK		(1<<9)
+#define SUNXI_I2SFAT1_MLS_SHIFT		9
+#define SUNXI_I2SFAT1_MLS_WIDTH		1
+#define SUNXI_I2SFAT1_SEXT		(1<<8)
+#define SUNXI_I2SFAT1_SEXT_MASK		(1<<8)
+#define SUNXI_I2SFAT1_SEXT_SHIFT	8
+#define SUNXI_I2SFAT1_SEXT_WIDTH	1
+#define SUNXI_I2SFAT1_SI_MASK		(3<<6)
+#define SUNXI_I2SFAT1_SI_1ST		(0<<6)
+#define SUNXI_I2SFAT1_SI_2ND		(1<<6)
+#define SUNXI_I2SFAT1_SI_3RD		(2<<6)
+#define SUNXI_I2SFAT1_SI_4TH		(3<<6)
+#define SUNXI_I2SFAT1_SI_SHIFT		6
+#define SUNXI_I2SFAT1_SI_WIDTH		2
+#define SUNXI_I2SFAT1_SW		(1<<5)
+#define SUNXI_I2SFAT1_SW_MASK		(1<<5)
+#define SUNXI_I2SFAT1_SW_SHIFT		5
+#define SUNXI_I2SFAT1_SW_WIDTH		1
+#define SUNXI_I2SFAT1_SSYNC		(1<<4)
+#define SUNXI_I2SFAT1_SSYNC_MASK	(1<<4)
+#define SUNXI_I2SFAT1_SSYNC_SHIFT	4
+#define SUNXI_I2SFAT1_SSYNC_WIDTH	1
+#define SUNXI_I2SFAT1_RXPDM_MASK	(3<<2)
+#define SUNXI_I2SFAT1_RXPDM_16PCM	(0<<2)
+#define SUNXI_I2SFAT1_RXPDM_8PCM	(1<<2)
+#define SUNXI_I2SFAT1_RXPDM_8ULAW	(2<<2)
+#define SUNXI_I2SFAT1_RXPDM_8ALAW  	(3<<2)
+#define SUNXI_I2SFAT1_RXPDM_SHIFT	2
+#define SUNXI_I2SFAT1_RXPDM_WIDTH	2
+#define SUNXI_I2SFAT1_TXPDM_MASK	(3<<0)
+#define SUNXI_I2SFAT1_TXPDM_16PCM	(0<<0)
+#define SUNXI_I2SFAT1_TXPDM_8PCM	(1<<0)
+#define SUNXI_I2SFAT1_TXPDM_8ULAW	(2<<0)
+#define SUNXI_I2SFAT1_TXPDM_8ALAW  	(3<<0)
+#define SUNXI_I2SFAT1_TXPDM_SHIFT	0
+#define SUNXI_I2SFAT1_TXPDM_WIDTH	2
+
+/* SUNXI_I2S_TXFIFO	0x0C 	 Digital Audio TX FIFO Register */
+
+/* SUNXI_I2S_RXFIFO	0x10 	 Digital Audio RX FIFO Register */
+
+/* SUNXI_I2S_FCTL	0x14 	 Digital Audio FIFO Control Register */
+
+#define SUNXI_I2SFCTL_FIFOSRC		(1<<31)
+#define SUNXI_I2SFCTL_FIFOSRC_MASK	(1<<31)
+#define SUNXI_I2SFCTL_FIFOSRC_SHIFT	31
+#define SUNXI_I2SFCTL_FIFOSRC_WIDTH	1
+#define SUNXI_I2SFCTL_FTX		(1<<25)
+#define SUNXI_I2SFCTL_FTX_MASK		(1<<25)
+#define SUNXI_I2SFCTL_FTX_SHIFT		25
+#define SUNXI_I2SFCTL_FTX_WIDTH		1
+#define SUNXI_I2SFCTL_FRX		(1<<24)
+#define SUNXI_I2SFCTL_FRX_MASK		(1<<24)
+#define SUNXI_I2SFCTL_FRX_SHIFT		24
+#define SUNXI_I2SFCTL_FRX_WIDTH		1
+#define SUNXI_I2SFCTL_TXTL(x) ((x << SUNXI_I2SFCTL_TXTL_SHIFT) & SUNXI_I2SFCTL_TXTL_MASK)
+#define SUNXI_I2SFCTL_TXTL_MASK		(0x7F<<12)
+#define SUNXI_I2SFCTL_TXTL_SHIFT	12
+#define SUNXI_I2SFCTL_TXTL_WIDTH	7
+#define SUNXI_I2SFCTL_RXTL(x) ((x << SUNXI_I2SFCTL_RXTL_SHIFT) & SUNXI_I2SFCTL_RXTL_MASK)
+#define SUNXI_I2SFCTL_RXTL_MASK		(0x3F<<4)
+#define SUNXI_I2SFCTL_RXTL_SHIFT	4
+#define SUNXI_I2SFCTL_RXTL_WIDTH	6
+#define SUNXI_I2SFCTL_TXIM_MASK		(1<<2)
+#define SUNXI_I2SFCTL_TXIM_MOD0		(0<<2)
+#define SUNXI_I2SFCTL_TXIM_MOD1		(1<<2)
+#define SUNXI_I2SFCTL_TXIM_SHIFT	2
+#define SUNXI_I2SFCTL_TXIM_WIDTH	1
+#define SUNXI_I2SFCTL_RXOM_MASK		(3<<0)
+#define SUNXI_I2SFCTL_RXOM_MOD0		(0<<0)
+#define SUNXI_I2SFCTL_RXOM_MOD1		(1<<0)
+#define SUNXI_I2SFCTL_RXOM_MOD2		(2<<0)
+#define SUNXI_I2SFCTL_RXOM_MOD3		(3<<0)
+#define SUNXI_I2SFCTL_RXOM_SHIFT	0
+#define SUNXI_I2SFCTL_RXOM_WIDTH	2
+
+/* SUNXI_I2S_FSTA	0x18 	 Digital Audio FIFO Status Register */
+
+#define SUNXI_I2SFSTA_TXE		(1<<28)
+#define SUNXI_I2SFSTA_TXE_MASK		(1<<28)
+#define SUNXI_I2SFSTA_TXE_SHIFT		28
+#define SUNXI_I2SFSTA_TXE_WIDTH		1
+#define SUNXI_I2SFSTA_TXECNT_MASK	(0xFF<<16)
+#define SUNXI_I2SFSTA_TXECNT_SHIFT	16
+#define SUNXI_I2SFSTA_TXECNT_WIDTH	8
+#define SUNXI_I2SFSTA_RXA		(1<<8)
+#define SUNXI_I2SFSTA_RXA_MASK		(1<<8)
+#define SUNXI_I2SFSTA_RXA_SHIFT		8
+#define SUNXI_I2SFSTA_RXA_WIDTH		1
+#define SUNXI_I2SFSTA_RXACNT_MASK	(0x7F<<0)
+#define SUNXI_I2SFSTA_RXACNT_SHIFT	0
+#define SUNXI_I2SFSTA_RXACNT_WIDTH	7
+
+/* SUNXI_I2S_INT	0x1C 	 Digital Audio Interrupt Control Register */
+
+#define SUNXI_I2SINT_TXDRQEN		(1<<7)
+#define SUNXI_I2SINT_TXDRQEN_MASK	(1<<7)
+#define SUNXI_I2SINT_TXDRQEN_SHIFT	7
+#define SUNXI_I2SINT_TXDRQEN_WIDTH	1
+#define SUNXI_I2SINT_TXUIEN		(1<<6)
+#define SUNXI_I2SINT_TXUIEN_MASK	(1<<6)
+#define SUNXI_I2SINT_TXUIEN_SHIFT	6
+#define SUNXI_I2SINT_TXUIEN_WIDTH	1
+#define SUNXI_I2SINT_TXOIEN		(1<<5)
+#define SUNXI_I2SINT_TXOIEN_MASK	(1<<5)
+#define SUNXI_I2SINT_TXOIEN_SHIFT	5
+#define SUNXI_I2SINT_TXOIEN_WIDTH	1
+#define SUNXI_I2SINT_TXEIEN		(1<<4)
+#define SUNXI_I2SINT_TXEIEN_MASK	(1<<4)
+#define SUNXI_I2SINT_TXEIEN_SHIFT	4
+#define SUNXI_I2SINT_TXEIEN_WIDTH	1
+#define SUNXI_I2SINT_RXDRQEN		(1<<3)
+#define SUNXI_I2SINT_RXDRQEN_MASK	(1<<3)
+#define SUNXI_I2SINT_RXDRQEN_SHIFT	3
+#define SUNXI_I2SINT_RXDRQEN_WIDTH	1
+#define SUNXI_I2SINT_RXUIEN		(1<<2)
+#define SUNXI_I2SINT_RXUIEN_MASK	(1<<2)
+#define SUNXI_I2SINT_RXUIEN_SHIFT	2
+#define SUNXI_I2SINT_RXUIEN_WIDTH	1
+#define SUNXI_I2SINT_RXOIEN		(1<<1)
+#define SUNXI_I2SINT_RXOIEN_MASK	(1<<1)
+#define SUNXI_I2SINT_RXOIEN_SHIFT	1
+#define SUNXI_I2SINT_RXOIEN_WIDTH	1
+#define SUNXI_I2SINT_RXAIEN		(1<<0)
+#define SUNXI_I2SINT_RXAIEN_MASK	(1<<0)
+#define SUNXI_I2SINT_RXAIEN_SHIFT	0
+#define SUNXI_I2SINT_RXAIEN_WIDTH	1
+
+/* SUNXI_I2S_ISTA	0x20 	 Digital Audio Interrupt Status Register */
+
+#define SUNXI_I2SSTA_TXUIEN		(1<<6)
+#define SUNXI_I2SSTA_TXUIEN_MASK	(1<<6)
+#define SUNXI_I2SSTA_TXUIEN_SHIFT	6
+#define SUNXI_I2SSTA_TXUIEN_WIDTH	1
+#define SUNXI_I2SSTA_TXOIEN		(1<<5)
+#define SUNXI_I2SSTA_TXOIEN_MASK	(1<<5)
+#define SUNXI_I2SSTA_TXOIEN_SHIFT	5
+#define SUNXI_I2SSTA_TXOIEN_WIDTH	1
+#define SUNXI_I2SSTA_TXEIEN		(1<<4)
+#define SUNXI_I2SSTA_TXEIEN_MASK	(1<<4)
+#define SUNXI_I2SSTA_TXEIEN_SHIFT	4
+#define SUNXI_I2SSTA_TXEIEN_WIDTH	1
+#define SUNXI_I2SSTA_RXUIEN		(1<<2)
+#define SUNXI_I2SSTA_RXUIEN_MASK	(1<<2)
+#define SUNXI_I2SSTA_RXUIEN_SHIFT	2
+#define SUNXI_I2SSTA_RXUIEN_WIDTH	1
+#define SUNXI_I2SSTA_RXOIEN		(1<<1)
+#define SUNXI_I2SSTA_RXOIEN_MASK	(1<<1)
+#define SUNXI_I2SSTA_RXOIEN_SHIFT	1
+#define SUNXI_I2SSTA_RXOIEN_WIDTH	1
+#define SUNXI_I2SSTA_RXAIEN		(1<<0)
+#define SUNXI_I2SSTA_RXAIEN_MASK	(1<<0)
+#define SUNXI_I2SSTA_RXAIEN_SHIFT	0
+#define SUNXI_I2SSTA_RXAIEN_WIDTH	1
+
+/* SUNXI_I2S_CLKD	0x24 	 Digital Audio Clock Divide Register */
+
+#define SUNXI_I2SCLKD_MCLKOEN		(1<<7)
+#define SUNXI_I2SCLKD_MCLKOEN_MASK	(1<<7)
+#define SUNXI_I2SCLKD_MCLKOEN_SHIFT	7
+#define SUNXI_I2SCLKD_MCLKOEN_WIDTH	1
+#define SUNXI_I2SCLKD_BCLKDIV_MASK	(7<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_2		(0<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_4		(1<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_6		(2<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_8		(3<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_12	(4<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_16	(5<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_32	(6<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_64	(7<<4)
+#define SUNXI_I2SCLKD_BCLKDIV_SHIFT	4
+#define SUNXI_I2SCLKD_BCLKDIV_WIDTH	3
+#define SUNXI_I2SCLKD_MCLKDIV_MASK	(0xF<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_1		(0<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_2		(1<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_4		(2<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_6		(3<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_8		(4<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_12	(5<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_16	(6<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_24	(7<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_32	(8<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_48	(9<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_64	(10<<0)
+#define SUNXI_I2SCLKD_MCLKDIV_SHIFT	0
+#define SUNXI_I2SCLKD_MCLKDIV_WIDTH	4
+
+/* SUNXI_I2S_RXCNT	0x28 	 Digital Audio RX Sample Counter Register */
+
+/* SUNXI_I2S_TXCNT	0x2C 	 Digital Audio TX Sample Counter Register */
+
+/* SUNXI_I2S_TXCHSEL	0x30 	 Digital Audio TX Channel Select register */
+
+#define SUNXI_I2STXCHSEL_CHNUM_MASK	(7<<0)
+#define SUNXI_I2STXCHSEL_CHNUM_SHIFT	0
+#define SUNXI_I2STXCHSEL_CHNUM_WIDTH	3
+
+/* SUNXI_I2S_TXCHMAP	0x34 	 Digital Audio TX Channel Mapping Register */
+
+#define SUNXI_I2STXCHMAP_CH7_MASK	(7<<28)
+#define SUNXI_I2STXCHMAP_CH7_SHIFT	28
+#define SUNXI_I2STXCHMAP_CH7_WIDTH	3
+#define SUNXI_I2STXCHMAP_CH6_MASK	(7<<24)
+#define SUNXI_I2STXCHMAP_CH6_SHIFT	24
+#define SUNXI_I2STXCHMAP_CH6_WIDTH	3
+#define SUNXI_I2STXCHMAP_CH5_MASK	(7<<20)
+#define SUNXI_I2STXCHMAP_CH5_SHIFT	20
+#define SUNXI_I2STXCHMAP_CH5_WIDTH	3
+#define SUNXI_I2STXCHMAP_CH4_MASK	(7<<16)
+#define SUNXI_I2STXCHMAP_CH4_SHIFT	16
+#define SUNXI_I2STXCHMAP_CH4_WIDTH	3
+#define SUNXI_I2STXCHMAP_CH3_MASK	(7<<12)
+#define SUNXI_I2STXCHMAP_CH3_SHIFT	12
+#define SUNXI_I2STXCHMAP_CH3_WIDTH	3
+#define SUNXI_I2STXCHMAP_CH2_MASK	(7<<8)
+#define SUNXI_I2STXCHMAP_CH2_SHIFT	8
+#define SUNXI_I2STXCHMAP_CH2_WIDTH	3
+#define SUNXI_I2STXCHMAP_CH1_MASK	(7<<4)
+#define SUNXI_I2STXCHMAP_CH1_SHIFT	4
+#define SUNXI_I2STXCHMAP_CH1_WIDTH	3
+#define SUNXI_I2STXCHMAP_CH0_MASK	(7<<0)
+#define SUNXI_I2STXCHMAP_CH0_SHIFT	0
+#define SUNXI_I2STXCHMAP_CH0_WIDTH	3
+
+/* SUNXI_I2S_RXCHSEL	0x38 	 Digital Audio RX Channel Select register */
+
+#define SUNXI_I2SRXCHSEL_CHNUM_MASK	(7<<0)
+#define SUNXI_I2SRXCHSEL_CHNUM_SHIFT	0
+#define SUNXI_I2SRXCHSEL_CHNUM_WIDTH	3
+
+/* SUNXI_I2S_RXCHMAP	0x3C 	 Digital Audio RX Channel Mapping Register */
+
+#define SUNXI_I2SRXCHMAP_CH3_MASK	(7<<12)
+#define SUNXI_I2SRXCHMAP_CH3_SHIFT	12
+#define SUNXI_I2SRXCHMAP_CH3_WIDTH	3
+#define SUNXI_I2SRXCHMAP_CH2_MASK	(7<<8)
+#define SUNXI_I2SRXCHMAP_CH2_SHIFT	8
+#define SUNXI_I2SRXCHMAP_CH2_WIDTH	3
+#define SUNXI_I2SRXCHMAP_CH1_MASK	(7<<4)
+#define SUNXI_I2SRXCHMAP_CH1_SHIFT	4
+#define SUNXI_I2SRXCHMAP_CH1_WIDTH	3
+#define SUNXI_I2SRXCHMAP_CH0_MASK	(7<<0)
+#define SUNXI_I2SRXCHMAP_CH0_SHIFT	0
+#define SUNXI_I2SRXCHMAP_CH0_WIDTH	3
+
+/* Supported SoC families - used for quirks */
+enum sunxi_soc_family {
+	SUN4I,	/* A10 SoC - later revisions */
+	SUN5I,	/* A10S/A13 SoCs */
+	SUN7I,	/* A20 SoC */
+};
+
+struct sunxi_priv {
+	enum sunxi_soc_family revision;
+	struct regmap *regmap;
+	struct clk *clk_apb, *clk_iis, *clk_mclk;
+	struct clk_divider mclk_div;
+	int master, sysclk;
+	struct device *dev;
+
+	struct snd_dmaengine_dai_dma_data playback_dma_data;
+	struct snd_dmaengine_dai_dma_data capture_dma_data;
+
+	/* PCM support */
+	u32 ws_size;		//16 BCLK, 20 BCLK, 24 BCLK, 32 BCLK)
+	u32 pcm_txtype;		//PCM transmitter type (0: 16-bits linear mode, 1: 8-bits linear mode, 2: u-law, 3: A-law)
+	u32 pcm_rxtype;		//PCM receiver type  (0: 16-bits linear mode, 1: 8-bits linear mode, 2: u-law, 3: A-law)
+	u32 pcm_sw;		//PCM slot width (8: 8 bits, 16: 16 bits)
+	u32 pcm_sync_period;	//PCM sync period (16/32/64/128/256)
+	u32 pcm_sync_type;	//PCM sync symbol size (0: short sync, 1: long sync)
+	u32 pcm_start_slot;	//PCM start slot index (1--4)
+	u32 pcm_lsb_first;	//0: MSB first, 1: LSB first
+	u32 pcm_ch_num;		//PCM channel number (1: one channel, 2: two channel)
+
+};
+
+#endif
